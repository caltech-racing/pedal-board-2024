
pedal_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f84  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091f0  080091f0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091f8  080091f8  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091fc  080091fc  000191fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  2000010c  0800930c  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e10  0800930c  00021e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001226e  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000347c  00000000  00000000  000323ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00035870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000acc  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230cc  00000000  00000000  000371bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b43  00000000  00000000  0005a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9ab4  00000000  00000000  0006ddcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b20  00000000  00000000  00137880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0013b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009130 	.word	0x08009130

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08009130 	.word	0x08009130

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <shift_reg_init>:

/**
 * @brief 	sets up the pins needed for SPI communication with the shift register.
 */
void shift_reg_init(GPIO_TypeDef *shcp_port, GPIO_TypeDef *stcp_port, GPIO_TypeDef *data_port,
                    uint16_t shcp_pin, uint16_t stcp_pin, uint16_t data_pin) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
 800051c:	807b      	strh	r3, [r7, #2]
    sr_stcp_port = stcp_port;
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <shift_reg_init+0x40>)
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	6013      	str	r3, [r2, #0]
    sr_shcp_port = shcp_port;
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <shift_reg_init+0x44>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	6013      	str	r3, [r2, #0]
    sr_data_port = data_port;
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <shift_reg_init+0x48>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6013      	str	r3, [r2, #0]
    sr_stcp_pin = stcp_pin;
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <shift_reg_init+0x4c>)
 8000532:	8b3b      	ldrh	r3, [r7, #24]
 8000534:	8013      	strh	r3, [r2, #0]
    sr_shcp_pin = shcp_pin;
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <shift_reg_init+0x50>)
 8000538:	887b      	ldrh	r3, [r7, #2]
 800053a:	8013      	strh	r3, [r2, #0]
    sr_data_pin = data_pin;
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <shift_reg_init+0x54>)
 800053e:	8bbb      	ldrh	r3, [r7, #28]
 8000540:	8013      	strh	r3, [r2, #0]
    shift_reg_clear();
 8000542:	f000 f8b5 	bl	80006b0 <shift_reg_clear>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000128 	.word	0x20000128
 8000554:	2000012c 	.word	0x2000012c
 8000558:	20000130 	.word	0x20000130
 800055c:	20000134 	.word	0x20000134
 8000560:	20000136 	.word	0x20000136
 8000564:	20000138 	.word	0x20000138

08000568 <shift_reg_write>:
/**
 * @brief   writes two bits of data to the shift registers.
 *
 * @param   data a pointer to the data to write.
 */
void shift_reg_write(const uint8_t *data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    // set stcp (storage clock) pin to low, as the data goes to the storage register on the rising edge of the clock
    HAL_GPIO_WritePin(sr_stcp_port, sr_stcp_pin, GPIO_PIN_RESET);
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <shift_reg_write+0xa4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a26      	ldr	r2, [pc, #152]	; (8000610 <shift_reg_write+0xa8>)
 8000576:	8811      	ldrh	r1, [r2, #0]
 8000578:	2200      	movs	r2, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f002 faa4 	bl	8002ac8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 2; i++) {
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	e032      	b.n	80005ec <shift_reg_write+0x84>
        for (int j = 0; j < 8; j++) {
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	e029      	b.n	80005e0 <shift_reg_write+0x78>
            // Lower the shift register clock. The shift happens on the rising edge.
            HAL_GPIO_WritePin(sr_shcp_port, sr_shcp_pin, GPIO_PIN_RESET);
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <shift_reg_write+0xac>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <shift_reg_write+0xb0>)
 8000592:	8811      	ldrh	r1, [r2, #0]
 8000594:	2200      	movs	r2, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fa96 	bl	8002ac8 <HAL_GPIO_WritePin>
            uint8_t reg_state = (data[i] & (1 << j)) >> j;  // jth bit of the ith element
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2201      	movs	r2, #1
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	ea01 0203 	and.w	r2, r1, r3
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	fa42 f303 	asr.w	r3, r2, r3
 80005b8:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(sr_data_port, sr_data_pin, reg_state);
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <shift_reg_write+0xb4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <shift_reg_write+0xb8>)
 80005c0:	8811      	ldrh	r1, [r2, #0]
 80005c2:	7bfa      	ldrb	r2, [r7, #15]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fa7f 	bl	8002ac8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(sr_shcp_port, sr_shcp_pin, GPIO_PIN_SET);
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <shift_reg_write+0xac>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <shift_reg_write+0xb0>)
 80005d0:	8811      	ldrh	r1, [r2, #0]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fa77 	bl	8002ac8 <HAL_GPIO_WritePin>
        for (int j = 0; j < 8; j++) {
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	3301      	adds	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	ddd2      	ble.n	800058c <shift_reg_write+0x24>
    for (int i = 0; i < 2; i++) {
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	ddc9      	ble.n	8000586 <shift_reg_write+0x1e>
        }
    }
    // once data is ready set latch pin to high
    HAL_GPIO_WritePin(sr_stcp_port, sr_stcp_pin, GPIO_PIN_SET);
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <shift_reg_write+0xa4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <shift_reg_write+0xa8>)
 80005f8:	8811      	ldrh	r1, [r2, #0]
 80005fa:	2201      	movs	r2, #1
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fa63 	bl	8002ac8 <HAL_GPIO_WritePin>
}
 8000602:	bf00      	nop
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000128 	.word	0x20000128
 8000610:	20000134 	.word	0x20000134
 8000614:	2000012c 	.word	0x2000012c
 8000618:	20000136 	.word	0x20000136
 800061c:	20000130 	.word	0x20000130
 8000620:	20000138 	.word	0x20000138

08000624 <shift_reg_display>:
 * 					is passed, then it is written to the right digit on the display.
 * @param	dp1		the left decimal point on the LED display, should be either DP_1 or DP_OFF
 * @param	dp2 	the right decimal point on the LED display, should be either DP_2 or DP_OFF
 * @retval	-1 if an error occurred, 0 if success
 */
int shift_reg_display(uint8_t num, uint8_t dp1, uint8_t dp2) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	460b      	mov	r3, r1
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	4613      	mov	r3, r2
 8000634:	717b      	strb	r3, [r7, #5]
	char num_str[8];
    uint8_t serial_data[2];
    if (num >= 100) {
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b63      	cmp	r3, #99	; 0x63
 800063a:	d901      	bls.n	8000640 <shift_reg_display+0x1c>
		num = 99;
 800063c:	2363      	movs	r3, #99	; 0x63
 800063e:	71fb      	strb	r3, [r7, #7]
	} else if (num < 0) {
        num = 0;
    }
	itoa(num, num_str, 10);
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f107 0110 	add.w	r1, r7, #16
 8000646:	220a      	movs	r2, #10
 8000648:	4618      	mov	r0, r3
 800064a:	f008 fd01 	bl	8009050 <itoa>
	if (strlen(num_str) == 1) {
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdd6 	bl	8000204 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d10a      	bne.n	8000674 <shift_reg_display+0x50>
		// defaults to displaying on the lowest digit
		serial_data[0] = DIGITS1[num_str[0] - '0'] | dp1;
 800065e:	7c3b      	ldrb	r3, [r7, #16]
 8000660:	3b30      	subs	r3, #48	; 0x30
 8000662:	4a11      	ldr	r2, [pc, #68]	; (80006a8 <shift_reg_display+0x84>)
 8000664:	5cd2      	ldrb	r2, [r2, r3]
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	4313      	orrs	r3, r2
 800066a:	b2db      	uxtb	r3, r3
 800066c:	733b      	strb	r3, [r7, #12]
        serial_data[1] = dp2;
 800066e:	797b      	ldrb	r3, [r7, #5]
 8000670:	737b      	strb	r3, [r7, #13]
 8000672:	e00f      	b.n	8000694 <shift_reg_display+0x70>
	} else {    // len == 2
		serial_data[0] = DIGITS1[num_str[1] - '0'] | dp1;
 8000674:	7c7b      	ldrb	r3, [r7, #17]
 8000676:	3b30      	subs	r3, #48	; 0x30
 8000678:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <shift_reg_display+0x84>)
 800067a:	5cd2      	ldrb	r2, [r2, r3]
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	4313      	orrs	r3, r2
 8000680:	b2db      	uxtb	r3, r3
 8000682:	733b      	strb	r3, [r7, #12]
        serial_data[1] = DIGITS2[num_str[0] - '0'] | dp2;
 8000684:	7c3b      	ldrb	r3, [r7, #16]
 8000686:	3b30      	subs	r3, #48	; 0x30
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <shift_reg_display+0x88>)
 800068a:	5cd2      	ldrb	r2, [r2, r3]
 800068c:	797b      	ldrb	r3, [r7, #5]
 800068e:	4313      	orrs	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	737b      	strb	r3, [r7, #13]
	}
    shift_reg_write(serial_data);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff65 	bl	8000568 <shift_reg_write>
	return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	08009190 	.word	0x08009190
 80006ac:	0800919c 	.word	0x0800919c

080006b0 <shift_reg_clear>:

/**
 * @brief clears the shift registers by writing in all 0s.
 */
void shift_reg_clear() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
    uint8_t clear_data[2] = {0x00, 0x00};
 80006b6:	2300      	movs	r3, #0
 80006b8:	80bb      	strh	r3, [r7, #4]
    shift_reg_write(clear_data);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff53 	bl	8000568 <shift_reg_write>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <ADC_channel_select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_channel_select(int channel)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  sConfig.Channel = channel;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <ADC_channel_select+0x38>)
 80006f6:	f000 feb9 	bl	800146c <HAL_ADC_ConfigChannel>
  {
    // Error_Handler();
  }
}
 80006fa:	bf00      	nop
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000013c 	.word	0x2000013c

08000708 <HAL_CAN_RxFifo0MsgPendingCallback>:
	HAL_GPIO_TogglePin(GPIOA, DEBUG_LED_0_Pin);
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	int retval = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);	// don't delay after this!
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000712:	4a0a      	ldr	r2, [pc, #40]	; (800073c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000714:	2100      	movs	r1, #0
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f001 fbc1 	bl	8001e9e <HAL_CAN_GetRxMessage>
 800071c:	4603      	mov	r3, r0
 800071e:	60fb      	str	r3, [r7, #12]
    shift_reg_display(RxData[4], DP_OFF, DP_OFF);
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	2100      	movs	r1, #0
 8000726:	2200      	movs	r2, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff7b 	bl	8000624 <shift_reg_display>
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200001b8 	.word	0x200001b8
 800073c:	200001e0 	.word	0x200001e0

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fc37 	bl	8000fb8 <HAL_Init>

  /* USER CODE BEGIN Init */
  TxHeader.IDE = CAN_ID_STD;
 800074a:	4b58      	ldr	r3, [pc, #352]	; (80008ac <main+0x16c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x466;
 8000750:	4b56      	ldr	r3, [pc, #344]	; (80008ac <main+0x16c>)
 8000752:	f240 4266 	movw	r2, #1126	; 0x466
 8000756:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000758:	4b54      	ldr	r3, [pc, #336]	; (80008ac <main+0x16c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 5;
 800075e:	4b53      	ldr	r3, [pc, #332]	; (80008ac <main+0x16c>)
 8000760:	2205      	movs	r2, #5
 8000762:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000764:	4b51      	ldr	r3, [pc, #324]	; (80008ac <main+0x16c>)
 8000766:	2200      	movs	r2, #0
 8000768:	751a      	strb	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f8b9 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f9c7 	bl	8000b00 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000772:	f000 f921 	bl	80009b8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000776:	f000 f971 	bl	8000a5c <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 800077a:	f007 feed 	bl	8008558 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
    HAL_CAN_Start(&hcan1);
 800077e:	484c      	ldr	r0, [pc, #304]	; (80008b0 <main+0x170>)
 8000780:	f001 fa6e 	bl	8001c60 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000784:	2102      	movs	r1, #2
 8000786:	484a      	ldr	r0, [pc, #296]	; (80008b0 <main+0x170>)
 8000788:	f001 fc9b 	bl	80020c2 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 800078c:	2110      	movs	r1, #16
 800078e:	4848      	ldr	r0, [pc, #288]	; (80008b0 <main+0x170>)
 8000790:	f001 fc97 	bl	80020c2 <HAL_CAN_ActivateNotification>

  shift_reg_init(ShiftRegSHCP_GPIO_Port, ShiftRegSTCP_GPIO_Port, ShiftRegDAT_GPIO_Port,
 8000794:	2310      	movs	r3, #16
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	2340      	movs	r3, #64	; 0x40
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2320      	movs	r3, #32
 800079e:	4a45      	ldr	r2, [pc, #276]	; (80008b4 <main+0x174>)
 80007a0:	4944      	ldr	r1, [pc, #272]	; (80008b4 <main+0x174>)
 80007a2:	4844      	ldr	r0, [pc, #272]	; (80008b4 <main+0x174>)
 80007a4:	f7ff feb4 	bl	8000510 <shift_reg_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hvil_out = HAL_GPIO_ReadPin(GPIOE, HVIL_OUT_OBSERVE_Pin);
 80007a8:	2104      	movs	r1, #4
 80007aa:	4843      	ldr	r0, [pc, #268]	; (80008b8 <main+0x178>)
 80007ac:	f002 f974 	bl	8002a98 <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b41      	ldr	r3, [pc, #260]	; (80008bc <main+0x17c>)
 80007b6:	701a      	strb	r2, [r3, #0]
	  hvil_logic = HAL_GPIO_ReadPin(GPIOE, HVIL_LOGIC_OBSERVE_Pin);
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	483f      	ldr	r0, [pc, #252]	; (80008b8 <main+0x178>)
 80007bc:	f002 f96c 	bl	8002a98 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b3e      	ldr	r3, [pc, #248]	; (80008c0 <main+0x180>)
 80007c6:	701a      	strb	r2, [r3, #0]
	  hvil_in = HAL_GPIO_ReadPin(GPIOE, HVIL_IN_OBSERVE_Pin);
 80007c8:	2110      	movs	r1, #16
 80007ca:	483b      	ldr	r0, [pc, #236]	; (80008b8 <main+0x178>)
 80007cc:	f002 f964 	bl	8002a98 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <main+0x184>)
 80007d6:	701a      	strb	r2, [r3, #0]
	  brakes_on = !HAL_GPIO_ReadPin(GPIOE, N_BRAKES_ON_Pin);
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	4836      	ldr	r0, [pc, #216]	; (80008b8 <main+0x178>)
 80007de:	f002 f95b 	bl	8002a98 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	bf0c      	ite	eq
 80007e8:	2301      	moveq	r3, #1
 80007ea:	2300      	movne	r3, #0
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <main+0x188>)
 80007f2:	701a      	strb	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(GPIOE, RANGE_ANOMALY_Pin)) {
 80007f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f8:	482f      	ldr	r0, [pc, #188]	; (80008b8 <main+0x178>)
 80007fa:	f002 f94d 	bl	8002a98 <HAL_GPIO_ReadPin>
//		  Error_Handler();
	  }

	  /* Read petal sensor values from ADC */
	  for (int i = 0; i < 4; i++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	e01d      	b.n	8000840 <main+0x100>
		  HAL_ADC_Start(&hadc1);
 8000804:	4831      	ldr	r0, [pc, #196]	; (80008cc <main+0x18c>)
 8000806:	f000 fcb1 	bl	800116c <HAL_ADC_Start>
		  ADC_channel_select(sensor_channels[i]);
 800080a:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <main+0x190>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff5a 	bl	80006cc <ADC_channel_select>
		  HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT_MS);
 8000818:	2164      	movs	r1, #100	; 0x64
 800081a:	482c      	ldr	r0, [pc, #176]	; (80008cc <main+0x18c>)
 800081c:	f000 fd8d 	bl	800133a <HAL_ADC_PollForConversion>
		  pedal_vals[i] = HAL_ADC_GetValue(&hadc1);
 8000820:	482a      	ldr	r0, [pc, #168]	; (80008cc <main+0x18c>)
 8000822:	f000 fe15 	bl	8001450 <HAL_ADC_GetValue>
 8000826:	4603      	mov	r3, r0
 8000828:	b2d9      	uxtb	r1, r3
 800082a:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <main+0x194>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	460a      	mov	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8000834:	4825      	ldr	r0, [pc, #148]	; (80008cc <main+0x18c>)
 8000836:	f000 fd4d 	bl	80012d4 <HAL_ADC_Stop>
	  for (int i = 0; i < 4; i++) {
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b03      	cmp	r3, #3
 8000844:	ddde      	ble.n	8000804 <main+0xc4>
	  }
	  pedal_vals[4] = brakes_on;
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <main+0x188>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <main+0x194>)
 800084c:	711a      	strb	r2, [r3, #4]


	  for (int i = 0; i < 5; i++) {
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	e00b      	b.n	800086c <main+0x12c>
		  TxData[i] = pedal_vals[i];
 8000854:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <main+0x194>)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	4413      	add	r3, r2
 800085a:	7819      	ldrb	r1, [r3, #0]
 800085c:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <main+0x198>)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	4413      	add	r3, r2
 8000862:	460a      	mov	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 5; i++) {
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	2b04      	cmp	r3, #4
 8000870:	ddf0      	ble.n	8000854 <main+0x114>
//		  TxData[i] = i + 9;
	  }

	  HAL_Delay(1);	// so that the CAN transmissions don't pile up
 8000872:	2001      	movs	r0, #1
 8000874:	f000 fc12 	bl	800109c <HAL_Delay>
	  HAL_Delay(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087c:	f000 fc0e 	bl	800109c <HAL_Delay>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <main+0x19c>)
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <main+0x198>)
 8000884:	4909      	ldr	r1, [pc, #36]	; (80008ac <main+0x16c>)
 8000886:	480a      	ldr	r0, [pc, #40]	; (80008b0 <main+0x170>)
 8000888:	f001 fa2e 	bl	8001ce8 <HAL_CAN_AddTxMessage>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d005      	beq.n	800089e <main+0x15e>
		  HAL_GPIO_WritePin(DEBUG_LED_1_GPIO_Port, DEBUG_LED_1_Pin, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2108      	movs	r1, #8
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <main+0x174>)
 8000898:	f002 f916 	bl	8002ac8 <HAL_GPIO_WritePin>
 800089c:	e784      	b.n	80007a8 <main+0x68>
	//	   Error_Handler ();
	  } else {
		  HAL_GPIO_WritePin(DEBUG_LED_1_GPIO_Port, DEBUG_LED_1_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2108      	movs	r1, #8
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <main+0x174>)
 80008a4:	f002 f910 	bl	8002ac8 <HAL_GPIO_WritePin>
	  hvil_out = HAL_GPIO_ReadPin(GPIOE, HVIL_OUT_OBSERVE_Pin);
 80008a8:	e77e      	b.n	80007a8 <main+0x68>
 80008aa:	bf00      	nop
 80008ac:	200001c8 	.word	0x200001c8
 80008b0:	20000184 	.word	0x20000184
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40021000 	.word	0x40021000
 80008bc:	200001ac 	.word	0x200001ac
 80008c0:	200001ad 	.word	0x200001ad
 80008c4:	200001ae 	.word	0x200001ae
 80008c8:	200001af 	.word	0x200001af
 80008cc:	2000013c 	.word	0x2000013c
 80008d0:	080091a8 	.word	0x080091a8
 80008d4:	200001c0 	.word	0x200001c0
 80008d8:	200001b0 	.word	0x200001b0
 80008dc:	200001fc 	.word	0x200001fc

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2234      	movs	r2, #52	; 0x34
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f008 fbf2 	bl	80090d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <SystemClock_Config+0xd0>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a28      	ldr	r2, [pc, #160]	; (80009b0 <SystemClock_Config+0xd0>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <SystemClock_Config+0xd0>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <SystemClock_Config+0xd4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <SystemClock_Config+0xd4>)
 800092a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <SystemClock_Config+0xd4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093c:	2301      	movs	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000944:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000950:	2304      	movs	r3, #4
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000954:	2348      	movs	r3, #72	; 0x48
 8000956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800095c:	2303      	movs	r3, #3
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4618      	mov	r0, r3
 800096a:	f003 ff7d 	bl	8004868 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000974:	f000 f992 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	230f      	movs	r3, #15
 800097a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097c:	2302      	movs	r3, #2
 800097e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f003 fb79 	bl	800408c <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009a0:	f000 f97c 	bl	8000c9c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80009a4:	f003 fc58 	bl	8004258 <HAL_RCC_EnableCSS>
}
 80009a8:	bf00      	nop
 80009aa:	3750      	adds	r7, #80	; 0x50
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <MX_ADC1_Init+0x9c>)
 80009ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009de:	2201      	movs	r2, #1
 80009e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009f8:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <MX_ADC1_Init+0xa0>)
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a18:	f000 fb64 	bl	80010e4 <HAL_ADC_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a22:	f000 f93b 	bl	8000c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a26:	2307      	movs	r3, #7
 8000a28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a32:	463b      	mov	r3, r7
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a38:	f000 fd18 	bl	800146c <HAL_ADC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a42:	f000 f92b 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000013c 	.word	0x2000013c
 8000a54:	40012000 	.word	0x40012000
 8000a58:	0f000001 	.word	0x0f000001

08000a5c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a64:	4a25      	ldr	r2, [pc, #148]	; (8000afc <MX_CAN1_Init+0xa0>)
 8000a66:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a6a:	2212      	movs	r2, #18
 8000a6c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a80:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aac:	4812      	ldr	r0, [pc, #72]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000aae:	f000 fefb 	bl	80018a8 <HAL_CAN_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ab8:	f000 f8f0 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x000;
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x000;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_CAN1_Init+0x9c>)
 8000aea:	f000 ffd9 	bl	8001aa0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000184 	.word	0x20000184
 8000afc:	40006400 	.word	0x40006400

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a5b      	ldr	r2, [pc, #364]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b59      	ldr	r3, [pc, #356]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b55      	ldr	r3, [pc, #340]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a54      	ldr	r2, [pc, #336]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b52      	ldr	r3, [pc, #328]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a4d      	ldr	r2, [pc, #308]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b4b      	ldr	r3, [pc, #300]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a46      	ldr	r2, [pc, #280]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a3f      	ldr	r2, [pc, #252]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <MX_GPIO_Init+0x18c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, N_HVIL_FLOAT_Pin|N_HVIL_RESET_Pin, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2128      	movs	r1, #40	; 0x28
 8000ba6:	483a      	ldr	r0, [pc, #232]	; (8000c90 <MX_GPIO_Init+0x190>)
 8000ba8:	f001 ff8e 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb2:	4838      	ldr	r0, [pc, #224]	; (8000c94 <MX_GPIO_Init+0x194>)
 8000bb4:	f001 ff88 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_0_Pin|DEBUG_LED_1_Pin|ShiftRegDAT_Pin|ShiftRegSHCP_Pin
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2179      	movs	r1, #121	; 0x79
 8000bbc:	4836      	ldr	r0, [pc, #216]	; (8000c98 <MX_GPIO_Init+0x198>)
 8000bbe:	f001 ff83 	bl	8002ac8 <HAL_GPIO_WritePin>
                          |ShiftRegSTCP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HVIL_OUT_OBSERVE_Pin HVIL_IN_OBSERVE_Pin HVIL_LOGIC_OBSERVE_Pin RANGE_ANOMALY_Pin */
  GPIO_InitStruct.Pin = HVIL_OUT_OBSERVE_Pin|HVIL_IN_OBSERVE_Pin|HVIL_LOGIC_OBSERVE_Pin|RANGE_ANOMALY_Pin;
 8000bc2:	f248 0354 	movw	r3, #32852	; 0x8054
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	482e      	ldr	r0, [pc, #184]	; (8000c90 <MX_GPIO_Init+0x190>)
 8000bd8:	f001 fdda 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : N_HVIL_FLOAT_Pin N_HVIL_RESET_Pin */
  GPIO_InitStruct.Pin = N_HVIL_FLOAT_Pin|N_HVIL_RESET_Pin;
 8000bdc:	2328      	movs	r3, #40	; 0x28
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4827      	ldr	r0, [pc, #156]	; (8000c90 <MX_GPIO_Init+0x190>)
 8000bf4:	f001 fdcc 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4820      	ldr	r0, [pc, #128]	; (8000c94 <MX_GPIO_Init+0x194>)
 8000c12:	f001 fdbd 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_0_Pin DEBUG_LED_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_0_Pin|DEBUG_LED_1_Pin;
 8000c16:	2309      	movs	r3, #9
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481a      	ldr	r0, [pc, #104]	; (8000c98 <MX_GPIO_Init+0x198>)
 8000c2e:	f001 fdaf 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_EXTI_Pin BTN1_EXTI_Pin */
  GPIO_InitStruct.Pin = BTN0_EXTI_Pin|BTN1_EXTI_Pin;
 8000c32:	2306      	movs	r3, #6
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4814      	ldr	r0, [pc, #80]	; (8000c98 <MX_GPIO_Init+0x198>)
 8000c48:	f001 fda2 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShiftRegDAT_Pin ShiftRegSHCP_Pin ShiftRegSTCP_Pin */
  GPIO_InitStruct.Pin = ShiftRegDAT_Pin|ShiftRegSHCP_Pin|ShiftRegSTCP_Pin;
 8000c4c:	2370      	movs	r3, #112	; 0x70
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_GPIO_Init+0x198>)
 8000c64:	f001 fd94 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : N_BRAKES_ON_Pin */
  GPIO_InitStruct.Pin = N_BRAKES_ON_Pin;
 8000c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_BRAKES_ON_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_GPIO_Init+0x190>)
 8000c7e:	f001 fd87 	bl	8002790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020000 	.word	0x40020000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOE, N_HVIL_FLOAT_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	4801      	ldr	r0, [pc, #4]	; (8000cb0 <Error_Handler+0x14>)
 8000caa:	f001 ff0d 	bl	8002ac8 <HAL_GPIO_WritePin>
  while (1)
 8000cae:	e7fe      	b.n	8000cae <Error_Handler+0x12>
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a31      	ldr	r2, [pc, #196]	; (8000de8 <HAL_ADC_MspInit+0xe4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d15b      	bne.n	8000dde <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a28      	ldr	r2, [pc, #160]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a21      	ldr	r2, [pc, #132]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_ADC_MspInit+0xe8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4811      	ldr	r0, [pc, #68]	; (8000df0 <HAL_ADC_MspInit+0xec>)
 8000daa:	f001 fcf1 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dae:	2330      	movs	r3, #48	; 0x30
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <HAL_ADC_MspInit+0xf0>)
 8000dc2:	f001 fce5 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <HAL_ADC_MspInit+0xf4>)
 8000dda:	f001 fcd9 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3730      	adds	r7, #48	; 0x30
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40012000 	.word	0x40012000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020400 	.word	0x40020400

08000dfc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <HAL_CAN_MspInit+0xa4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d13c      	bne.n	8000e98 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_CAN_MspInit+0xa8>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_CAN_MspInit+0xa8>)
 8000e28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_CAN_MspInit+0xa8>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_CAN_MspInit+0xa8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <HAL_CAN_MspInit+0xa8>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_CAN_MspInit+0xa8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <HAL_CAN_MspInit+0xac>)
 8000e74:	f001 fc8c 	bl	8002790 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2014      	movs	r0, #20
 8000e7e:	f001 fc50 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e82:	2014      	movs	r0, #20
 8000e84:	f001 fc69 	bl	800275a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2015      	movs	r0, #21
 8000e8e:	f001 fc48 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e92:	2015      	movs	r0, #21
 8000e94:	f001 fc61 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40006400 	.word	0x40006400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000eb0:	f003 faf0 	bl	8004494 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x8>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f8ae 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <CAN1_RX0_IRQHandler+0x10>)
 8000f0a:	f001 f900 	bl	800210e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000184 	.word	0x20000184

08000f18 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <CAN1_RX1_IRQHandler+0x10>)
 8000f1e:	f001 f8f6 	bl	800210e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000184 	.word	0x20000184

08000f2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <OTG_FS_IRQHandler+0x10>)
 8000f32:	f001 ff39 	bl	8002da8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200016e4 	.word	0x200016e4

08000f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ffd7 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f008 f8a9 	bl	80090e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fbd3 	bl	8000740 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f9c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000fa8:	08009200 	.word	0x08009200
  ldr r2, =_sbss
 8000fac:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000fb0:	20001e10 	.word	0x20001e10

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f001 fb93 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fe62 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fbab 	bl	8002776 <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f001 fb73 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	20000200 	.word	0x20000200

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000200 	.word	0x20000200

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008

080010e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e033      	b.n	8001162 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fdfe 	bl	8000d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	2b00      	cmp	r3, #0
 8001120:	d118      	bne.n	8001154 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800112a:	f023 0302 	bic.w	r3, r3, #2
 800112e:	f043 0202 	orr.w	r2, r3, #2
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 faba 	bl	80016b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f023 0303 	bic.w	r3, r3, #3
 800114a:	f043 0201 	orr.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
 8001152:	e001      	b.n	8001158 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Start+0x1a>
 8001182:	2302      	movs	r3, #2
 8001184:	e097      	b.n	80012b6 <HAL_ADC_Start+0x14a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	d018      	beq.n	80011ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <HAL_ADC_Start+0x158>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a45      	ldr	r2, [pc, #276]	; (80012c8 <HAL_ADC_Start+0x15c>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9a      	lsrs	r2, r3, #18
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011c0:	e002      	b.n	80011c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f9      	bne.n	80011c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d15f      	bne.n	800129c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001206:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800121a:	d106      	bne.n	800122a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	f023 0206 	bic.w	r2, r3, #6
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	645a      	str	r2, [r3, #68]	; 0x44
 8001228:	e002      	b.n	8001230 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_ADC_Start+0x160>)
 800123a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001244:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d129      	bne.n	80012b4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e020      	b.n	80012b4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <HAL_ADC_Start+0x164>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d11b      	bne.n	80012b4 <HAL_ADC_Start+0x148>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d114      	bne.n	80012b4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	e00b      	b.n	80012b4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f043 0210 	orr.w	r2, r3, #16
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	40012300 	.word	0x40012300
 80012d0:	40012000 	.word	0x40012000

080012d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_Stop+0x16>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e021      	b.n	800132e <HAL_ADC_Stop+0x5a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0201 	bic.w	r2, r2, #1
 8001300:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001356:	d113      	bne.n	8001380 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001366:	d10b      	bne.n	8001380 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f043 0220 	orr.w	r2, r3, #32
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e063      	b.n	8001448 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001380:	f7ff fe80 	bl	8001084 <HAL_GetTick>
 8001384:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001386:	e021      	b.n	80013cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138e:	d01d      	beq.n	80013cc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_ADC_PollForConversion+0x6c>
 8001396:	f7ff fe75 	bl	8001084 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d212      	bcs.n	80013cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d00b      	beq.n	80013cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f043 0204 	orr.w	r2, r3, #4
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e03d      	b.n	8001448 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d1d6      	bne.n	8001388 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f06f 0212 	mvn.w	r2, #18
 80013e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d123      	bne.n	8001446 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001402:	2b00      	cmp	r3, #0
 8001404:	d11f      	bne.n	8001446 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800141e:	2b00      	cmp	r3, #0
 8001420:	d111      	bne.n	8001446 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d105      	bne.n	8001446 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f043 0201 	orr.w	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x1c>
 8001484:	2302      	movs	r3, #2
 8001486:	e105      	b.n	8001694 <HAL_ADC_ConfigChannel+0x228>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b09      	cmp	r3, #9
 8001496:	d925      	bls.n	80014e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68d9      	ldr	r1, [r3, #12]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	3b1e      	subs	r3, #30
 80014ae:	2207      	movs	r2, #7
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43da      	mvns	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	400a      	ands	r2, r1
 80014bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68d9      	ldr	r1, [r3, #12]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	4603      	mov	r3, r0
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4403      	add	r3, r0
 80014d6:	3b1e      	subs	r3, #30
 80014d8:	409a      	lsls	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	e022      	b.n	800152a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6919      	ldr	r1, [r3, #16]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	2207      	movs	r2, #7
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	400a      	ands	r2, r1
 8001506:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6919      	ldr	r1, [r3, #16]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	4603      	mov	r3, r0
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4403      	add	r3, r0
 8001520:	409a      	lsls	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b06      	cmp	r3, #6
 8001530:	d824      	bhi.n	800157c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	3b05      	subs	r3, #5
 8001544:	221f      	movs	r2, #31
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	400a      	ands	r2, r1
 8001552:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b05      	subs	r3, #5
 800156e:	fa00 f203 	lsl.w	r2, r0, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	635a      	str	r2, [r3, #52]	; 0x34
 800157a:	e04c      	b.n	8001616 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b0c      	cmp	r3, #12
 8001582:	d824      	bhi.n	80015ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b23      	subs	r3, #35	; 0x23
 8001596:	221f      	movs	r2, #31
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43da      	mvns	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	400a      	ands	r2, r1
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	3b23      	subs	r3, #35	; 0x23
 80015c0:	fa00 f203 	lsl.w	r2, r0, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
 80015cc:	e023      	b.n	8001616 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	3b41      	subs	r3, #65	; 0x41
 80015e0:	221f      	movs	r2, #31
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	400a      	ands	r2, r1
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	3b41      	subs	r3, #65	; 0x41
 800160a:	fa00 f203 	lsl.w	r2, r0, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_ADC_ConfigChannel+0x234>)
 8001618:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <HAL_ADC_ConfigChannel+0x238>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d109      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x1cc>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b12      	cmp	r3, #18
 800162a:	d105      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <HAL_ADC_ConfigChannel+0x238>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d123      	bne.n	800168a <HAL_ADC_ConfigChannel+0x21e>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b10      	cmp	r3, #16
 8001648:	d003      	beq.n	8001652 <HAL_ADC_ConfigChannel+0x1e6>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b11      	cmp	r3, #17
 8001650:	d11b      	bne.n	800168a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b10      	cmp	r3, #16
 8001664:	d111      	bne.n	800168a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_ADC_ConfigChannel+0x23c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <HAL_ADC_ConfigChannel+0x240>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	0c9a      	lsrs	r2, r3, #18
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800167c:	e002      	b.n	8001684 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3b01      	subs	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f9      	bne.n	800167e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40012300 	.word	0x40012300
 80016a4:	40012000 	.word	0x40012000
 80016a8:	20000000 	.word	0x20000000
 80016ac:	431bde83 	.word	0x431bde83

080016b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b8:	4b79      	ldr	r3, [pc, #484]	; (80018a0 <ADC_Init+0x1f0>)
 80016ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	021a      	lsls	r2, r3, #8
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800172a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6899      	ldr	r1, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <ADC_Init+0x1f4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d022      	beq.n	800178e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6899      	ldr	r1, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e00f      	b.n	80017ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800179c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0202 	bic.w	r2, r2, #2
 80017bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7e1b      	ldrb	r3, [r3, #24]
 80017c8:	005a      	lsls	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01b      	beq.n	8001814 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6859      	ldr	r1, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	3b01      	subs	r3, #1
 8001808:	035a      	lsls	r2, r3, #13
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	e007      	b.n	8001824 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001822:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	3b01      	subs	r3, #1
 8001840:	051a      	lsls	r2, r3, #20
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6899      	ldr	r1, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001866:	025a      	lsls	r2, r3, #9
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800187e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6899      	ldr	r1, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	029a      	lsls	r2, r3, #10
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	609a      	str	r2, [r3, #8]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40012300 	.word	0x40012300
 80018a4:	0f000001 	.word	0x0f000001

080018a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0ed      	b.n	8001a96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fa98 	bl	8000dfc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018dc:	f7ff fbd2 	bl	8001084 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018e2:	e012      	b.n	800190a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e4:	f7ff fbce 	bl	8001084 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b0a      	cmp	r3, #10
 80018f0:	d90b      	bls.n	800190a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2205      	movs	r2, #5
 8001902:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0c5      	b.n	8001a96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0e5      	beq.n	80018e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0202 	bic.w	r2, r2, #2
 8001926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001928:	f7ff fbac 	bl	8001084 <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800192e:	e012      	b.n	8001956 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001930:	f7ff fba8 	bl	8001084 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b0a      	cmp	r3, #10
 800193c:	d90b      	bls.n	8001956 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2205      	movs	r2, #5
 800194e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e09f      	b.n	8001a96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e5      	bne.n	8001930 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7e1b      	ldrb	r3, [r3, #24]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d108      	bne.n	800197e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e007      	b.n	800198e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7e5b      	ldrb	r3, [r3, #25]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d108      	bne.n	80019a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e007      	b.n	80019b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7e9b      	ldrb	r3, [r3, #26]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0220 	orr.w	r2, r2, #32
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e007      	b.n	80019e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0220 	bic.w	r2, r2, #32
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7edb      	ldrb	r3, [r3, #27]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0210 	bic.w	r2, r2, #16
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0210 	orr.w	r2, r2, #16
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7f1b      	ldrb	r3, [r3, #28]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d108      	bne.n	8001a26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0208 	orr.w	r2, r2, #8
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e007      	b.n	8001a36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0208 	bic.w	r2, r2, #8
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7f5b      	ldrb	r3, [r3, #29]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d108      	bne.n	8001a50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0204 	orr.w	r2, r2, #4
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e007      	b.n	8001a60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0204 	bic.w	r2, r2, #4
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	ea42 0103 	orr.w	r1, r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ab8:	7cfb      	ldrb	r3, [r7, #19]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d003      	beq.n	8001ac6 <HAL_CAN_ConfigFilter+0x26>
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	f040 80be 	bne.w	8001c42 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ac6:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <HAL_CAN_ConfigFilter+0x1bc>)
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ae0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	431a      	orrs	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	2201      	movs	r2, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	401a      	ands	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d123      	bne.n	8001b70 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3248      	adds	r2, #72	; 0x48
 8001b50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b66:	6979      	ldr	r1, [r7, #20]
 8001b68:	3348      	adds	r3, #72	; 0x48
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d122      	bne.n	8001bbe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3248      	adds	r2, #72	; 0x48
 8001b9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bb4:	6979      	ldr	r1, [r7, #20]
 8001bb6:	3348      	adds	r3, #72	; 0x48
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bd8:	e007      	b.n	8001bea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c04:	e007      	b.n	8001c16 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c34:	f023 0201 	bic.w	r2, r3, #1
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e006      	b.n	8001c50 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
  }
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40006400 	.word	0x40006400

08001c60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d12e      	bne.n	8001cd2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7ff f9fa 	bl	8001084 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c92:	e012      	b.n	8001cba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c94:	f7ff f9f6 	bl	8001084 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b0a      	cmp	r3, #10
 8001ca0:	d90b      	bls.n	8001cba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2205      	movs	r2, #5
 8001cb2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e012      	b.n	8001ce0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e5      	bne.n	8001c94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e006      	b.n	8001ce0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
  }
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d003      	beq.n	8001d14 <HAL_CAN_AddTxMessage+0x2c>
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	f040 80b8 	bne.w	8001e84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10a      	bne.n	8001d34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80a0 	beq.w	8001e74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	0e1b      	lsrs	r3, r3, #24
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d907      	bls.n	8001d54 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e09e      	b.n	8001e92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d54:	2201      	movs	r2, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10d      	bne.n	8001d82 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d70:	68f9      	ldr	r1, [r7, #12]
 8001d72:	6809      	ldr	r1, [r1, #0]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3318      	adds	r3, #24
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	440b      	add	r3, r1
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e00f      	b.n	8001da2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d92:	68f9      	ldr	r1, [r7, #12]
 8001d94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3318      	adds	r3, #24
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	440b      	add	r3, r1
 8001da0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3318      	adds	r3, #24
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	440b      	add	r3, r1
 8001db2:	3304      	adds	r3, #4
 8001db4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	7d1b      	ldrb	r3, [r3, #20]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d111      	bne.n	8001de2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	6811      	ldr	r1, [r2, #0]
 8001dd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3318      	adds	r3, #24
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	440b      	add	r3, r1
 8001dde:	3304      	adds	r3, #4
 8001de0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3307      	adds	r3, #7
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	061a      	lsls	r2, r3, #24
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3306      	adds	r3, #6
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3305      	adds	r3, #5
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	3204      	adds	r2, #4
 8001e02:	7812      	ldrb	r2, [r2, #0]
 8001e04:	4610      	mov	r0, r2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	6811      	ldr	r1, [r2, #0]
 8001e0a:	ea43 0200 	orr.w	r2, r3, r0
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	440b      	add	r3, r1
 8001e14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	061a      	lsls	r2, r3, #24
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3302      	adds	r3, #2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	041b      	lsls	r3, r3, #16
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	4313      	orrs	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	7812      	ldrb	r2, [r2, #0]
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	6811      	ldr	r1, [r2, #0]
 8001e40:	ea43 0200 	orr.w	r2, r3, r0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	440b      	add	r3, r1
 8001e4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3318      	adds	r3, #24
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4413      	add	r3, r2
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	6811      	ldr	r1, [r2, #0]
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3318      	adds	r3, #24
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	440b      	add	r3, r1
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e00e      	b.n	8001e92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e006      	b.n	8001e92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b087      	sub	sp, #28
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d003      	beq.n	8001ec2 <HAL_CAN_GetRxMessage+0x24>
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	f040 80f3 	bne.w	80020a8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10e      	bne.n	8001ee6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0e7      	b.n	80020b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d107      	bne.n	8001f04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0d8      	b.n	80020b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	331b      	adds	r3, #27
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	4413      	add	r3, r2
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0204 	and.w	r2, r3, #4
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	331b      	adds	r3, #27
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0d5b      	lsrs	r3, r3, #21
 8001f32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	331b      	adds	r3, #27
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	08db      	lsrs	r3, r3, #3
 8001f4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	331b      	adds	r3, #27
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0202 	and.w	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	331b      	adds	r3, #27
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 020f 	and.w	r2, r3, #15
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	331b      	adds	r3, #27
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3304      	adds	r3, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	331b      	adds	r3, #27
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0a1a      	lsrs	r2, r3, #8
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0c1a      	lsrs	r2, r3, #16
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0e1a      	lsrs	r2, r3, #24
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3303      	adds	r3, #3
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	4413      	add	r3, r2
 8002020:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	3304      	adds	r3, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	4413      	add	r3, r2
 8002038:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0a1a      	lsrs	r2, r3, #8
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	3305      	adds	r3, #5
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	4413      	add	r3, r2
 8002052:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0c1a      	lsrs	r2, r3, #16
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	3306      	adds	r3, #6
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0e1a      	lsrs	r2, r3, #24
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	3307      	adds	r3, #7
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0220 	orr.w	r2, r2, #32
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	e007      	b.n	80020a4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e006      	b.n	80020b6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
  }
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d002      	beq.n	80020e0 <HAL_CAN_ActivateNotification+0x1e>
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d109      	bne.n	80020f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6959      	ldr	r1, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e006      	b.n	8002102 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
  }
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b08a      	sub	sp, #40	; 0x28
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d07c      	beq.n	800224e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d023      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2201      	movs	r2, #1
 8002164:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f983 	bl	800247c <HAL_CAN_TxMailbox0CompleteCallback>
 8002176:	e016      	b.n	80021a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
 800218a:	e00c      	b.n	80021a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	e002      	b.n	80021a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f989 	bl	80024b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d024      	beq.n	80021fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f963 	bl	8002490 <HAL_CAN_TxMailbox1CompleteCallback>
 80021ca:	e016      	b.n	80021fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d004      	beq.n	80021e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	e00c      	b.n	80021fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e002      	b.n	80021fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f969 	bl	80024cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d024      	beq.n	800224e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800220c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f943 	bl	80024a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800221e:	e016      	b.n	800224e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	e00c      	b.n	800224e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e002      	b.n	800224e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f949 	bl	80024e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00c      	beq.n	8002272 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002268:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2210      	movs	r2, #16
 8002270:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00b      	beq.n	8002294 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2208      	movs	r2, #8
 800228c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f930 	bl	80024f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fe fa2b 	bl	8000708 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00c      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2210      	movs	r2, #16
 80022d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2208      	movs	r2, #8
 80022f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f912 	bl	800251c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f8f9 	bl	8002508 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2210      	movs	r2, #16
 8002330:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8fc 	bl	8002530 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2208      	movs	r2, #8
 8002352:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f8f5 	bl	8002544 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d07b      	beq.n	800245c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d072      	beq.n	8002454 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d043      	beq.n	8002454 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d03e      	beq.n	8002454 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023dc:	2b60      	cmp	r3, #96	; 0x60
 80023de:	d02b      	beq.n	8002438 <HAL_CAN_IRQHandler+0x32a>
 80023e0:	2b60      	cmp	r3, #96	; 0x60
 80023e2:	d82e      	bhi.n	8002442 <HAL_CAN_IRQHandler+0x334>
 80023e4:	2b50      	cmp	r3, #80	; 0x50
 80023e6:	d022      	beq.n	800242e <HAL_CAN_IRQHandler+0x320>
 80023e8:	2b50      	cmp	r3, #80	; 0x50
 80023ea:	d82a      	bhi.n	8002442 <HAL_CAN_IRQHandler+0x334>
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d019      	beq.n	8002424 <HAL_CAN_IRQHandler+0x316>
 80023f0:	2b40      	cmp	r3, #64	; 0x40
 80023f2:	d826      	bhi.n	8002442 <HAL_CAN_IRQHandler+0x334>
 80023f4:	2b30      	cmp	r3, #48	; 0x30
 80023f6:	d010      	beq.n	800241a <HAL_CAN_IRQHandler+0x30c>
 80023f8:	2b30      	cmp	r3, #48	; 0x30
 80023fa:	d822      	bhi.n	8002442 <HAL_CAN_IRQHandler+0x334>
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d002      	beq.n	8002406 <HAL_CAN_IRQHandler+0x2f8>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d005      	beq.n	8002410 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002404:	e01d      	b.n	8002442 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800240e:	e019      	b.n	8002444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002418:	e014      	b.n	8002444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002422:	e00f      	b.n	8002444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800242c:	e00a      	b.n	8002444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002436:	e005      	b.n	8002444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002440:	e000      	b.n	8002444 <HAL_CAN_IRQHandler+0x336>
            break;
 8002442:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002452:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2204      	movs	r2, #4
 800245a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f872 	bl	8002558 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	; 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259e:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60d3      	str	r3, [r2, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <__NVIC_GetPriorityGrouping+0x18>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0307 	and.w	r3, r3, #7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db0b      	blt.n	80025fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4907      	ldr	r1, [pc, #28]	; (8002608 <__NVIC_EnableIRQ+0x38>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	; (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff29 	bl	800256c <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff3e 	bl	80025b4 <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff8e 	bl	8002660 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5d 	bl	800260c <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff31 	bl	80025d0 <__NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffa2 	bl	80026c8 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e159      	b.n	8002a60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8148 	bne.w	8002a5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a2 	beq.w	8002a5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b57      	ldr	r3, [pc, #348]	; (8002a78 <HAL_GPIO_Init+0x2e8>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a56      	ldr	r2, [pc, #344]	; (8002a78 <HAL_GPIO_Init+0x2e8>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <HAL_GPIO_Init+0x2e8>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_GPIO_Init+0x2ec>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a49      	ldr	r2, [pc, #292]	; (8002a80 <HAL_GPIO_Init+0x2f0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d019      	beq.n	8002992 <HAL_GPIO_Init+0x202>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a48      	ldr	r2, [pc, #288]	; (8002a84 <HAL_GPIO_Init+0x2f4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0x1fe>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a47      	ldr	r2, [pc, #284]	; (8002a88 <HAL_GPIO_Init+0x2f8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00d      	beq.n	800298a <HAL_GPIO_Init+0x1fa>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a46      	ldr	r2, [pc, #280]	; (8002a8c <HAL_GPIO_Init+0x2fc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <HAL_GPIO_Init+0x1f6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a45      	ldr	r2, [pc, #276]	; (8002a90 <HAL_GPIO_Init+0x300>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_GPIO_Init+0x1f2>
 800297e:	2304      	movs	r3, #4
 8002980:	e008      	b.n	8002994 <HAL_GPIO_Init+0x204>
 8002982:	2307      	movs	r3, #7
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x204>
 8002986:	2303      	movs	r3, #3
 8002988:	e004      	b.n	8002994 <HAL_GPIO_Init+0x204>
 800298a:	2302      	movs	r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x204>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_GPIO_Init+0x204>
 8002992:	2300      	movs	r3, #0
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f002 0203 	and.w	r2, r2, #3
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	4093      	lsls	r3, r2
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a4:	4935      	ldr	r1, [pc, #212]	; (8002a7c <HAL_GPIO_Init+0x2ec>)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <HAL_GPIO_Init+0x304>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029d6:	4a2f      	ldr	r2, [pc, #188]	; (8002a94 <HAL_GPIO_Init+0x304>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029dc:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <HAL_GPIO_Init+0x304>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a00:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a2a:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	f67f aea2 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40013c00 	.word	0x40013c00

08002a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	887b      	ldrh	r3, [r7, #2]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
 8002ab4:	e001      	b.n	8002aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae4:	e003      	b.n	8002aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	041a      	lsls	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	619a      	str	r2, [r3, #24]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afc:	b08f      	sub	sp, #60	; 0x3c
 8002afe:	af0a      	add	r7, sp, #40	; 0x28
 8002b00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e116      	b.n	8002d3a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f005 ff08 	bl	800893c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f002 fa25 	bl	8004f9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	687e      	ldr	r6, [r7, #4]
 8002b58:	466d      	mov	r5, sp
 8002b5a:	f106 0410 	add.w	r4, r6, #16
 8002b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b6e:	1d33      	adds	r3, r6, #4
 8002b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b72:	6838      	ldr	r0, [r7, #0]
 8002b74:	f002 f8fc 	bl	8004d70 <USB_CoreInit>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0d7      	b.n	8002d3a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 fa13 	bl	8004fbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	e04a      	b.n	8002c32 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	333d      	adds	r3, #61	; 0x3d
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	333c      	adds	r3, #60	; 0x3c
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	b298      	uxth	r0, r3
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3344      	adds	r3, #68	; 0x44
 8002bd8:	4602      	mov	r2, r0
 8002bda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3340      	adds	r3, #64	; 0x40
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3348      	adds	r3, #72	; 0x48
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	334c      	adds	r3, #76	; 0x4c
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3354      	adds	r3, #84	; 0x54
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d3af      	bcc.n	8002b9c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e044      	b.n	8002ccc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d3b5      	bcc.n	8002c42 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	687e      	ldr	r6, [r7, #4]
 8002cde:	466d      	mov	r5, sp
 8002ce0:	f106 0410 	add.w	r4, r6, #16
 8002ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cf0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cf4:	1d33      	adds	r3, r6, #4
 8002cf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf8:	6838      	ldr	r0, [r7, #0]
 8002cfa:	f002 f9ab 	bl	8005054 <USB_DevInit>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e014      	b.n	8002d3a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f001 f98b 	bl	8004044 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 faed 	bl	8006312 <USB_DevDisconnect>

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_PCD_Start+0x1c>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e020      	b.n	8002da0 <HAL_PCD_Start+0x5e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d109      	bne.n	8002d82 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 f8f6 	bl	8004f78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 fa9d 	bl	80062d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b08d      	sub	sp, #52	; 0x34
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fb5b 	bl	800647a <USB_GetMode>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 84b7 	bne.w	800373a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f003 fabf 	bl	8006354 <USB_ReadInterrupts>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 84ad 	beq.w	8003738 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 faac 	bl	8006354 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d107      	bne.n	8002e16 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f002 0202 	and.w	r2, r2, #2
 8002e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fa9a 	bl	8006354 <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d161      	bne.n	8002eee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699a      	ldr	r2, [r3, #24]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0210 	bic.w	r2, r2, #16
 8002e38:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	0c5b      	lsrs	r3, r3, #17
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d124      	bne.n	8002eb0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d035      	beq.n	8002ede <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	6a38      	ldr	r0, [r7, #32]
 8002e86:	f003 f8d1 	bl	800602c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e96:	441a      	add	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea8:	441a      	add	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	621a      	str	r2, [r3, #32]
 8002eae:	e016      	b.n	8002ede <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	0c5b      	lsrs	r3, r3, #17
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d110      	bne.n	8002ede <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6a38      	ldr	r0, [r7, #32]
 8002ec8:	f003 f8b0 	bl	800602c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	6a1a      	ldr	r2, [r3, #32]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed8:	441a      	add	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0210 	orr.w	r2, r2, #16
 8002eec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fa2e 	bl	8006354 <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f02:	f040 80a7 	bne.w	8003054 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 fa33 	bl	800637a <USB_ReadDevAllOutEpInterrupt>
 8002f14:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f16:	e099      	b.n	800304c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 808e 	beq.w	8003040 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 fa57 	bl	80063e2 <USB_ReadDevOutEPInterrupt>
 8002f34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00c      	beq.n	8002f5a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2301      	movs	r3, #1
 8002f50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 feef 	bl	8003d38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00c      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f70:	461a      	mov	r2, r3
 8002f72:	2308      	movs	r3, #8
 8002f74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 ffc5 	bl	8003f08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f94:	461a      	mov	r2, r3
 8002f96:	2310      	movs	r3, #16
 8002f98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d030      	beq.n	8003006 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d109      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	78db      	ldrb	r3, [r3, #3]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f005 fdb6 	bl	8008b60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003000:	461a      	mov	r2, r3
 8003002:	2302      	movs	r3, #2
 8003004:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301c:	461a      	mov	r2, r3
 800301e:	2320      	movs	r3, #32
 8003020:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003038:	461a      	mov	r2, r3
 800303a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800303e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	3301      	adds	r3, #1
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	f47f af62 	bne.w	8002f18 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f003 f97b 	bl	8006354 <USB_ReadInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003064:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003068:	f040 80db 	bne.w	8003222 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f003 f99c 	bl	80063ae <USB_ReadDevAllInEpInterrupt>
 8003076:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800307c:	e0cd      	b.n	800321a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80c2 	beq.w	800320e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f003 f9c2 	bl	800641e <USB_ReadDevInEPInterrupt>
 800309a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d057      	beq.n	8003156 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	2201      	movs	r2, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	69f9      	ldr	r1, [r7, #28]
 80030c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030c6:	4013      	ands	r3, r2
 80030c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d6:	461a      	mov	r2, r3
 80030d8:	2301      	movs	r3, #1
 80030da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d132      	bne.n	800314a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	334c      	adds	r3, #76	; 0x4c
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4403      	add	r3, r0
 8003104:	3348      	adds	r3, #72	; 0x48
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4419      	add	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4403      	add	r3, r0
 8003118:	334c      	adds	r3, #76	; 0x4c
 800311a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d113      	bne.n	800314a <HAL_PCD_IRQHandler+0x3a2>
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3354      	adds	r3, #84	; 0x54
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d108      	bne.n	800314a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003142:	461a      	mov	r2, r3
 8003144:	2101      	movs	r1, #1
 8003146:	f003 f9c9 	bl	80064dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f005 fc8a 	bl	8008a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316c:	461a      	mov	r2, r3
 800316e:	2308      	movs	r3, #8
 8003170:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003188:	461a      	mov	r2, r3
 800318a:	2310      	movs	r3, #16
 800318c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a4:	461a      	mov	r2, r3
 80031a6:	2340      	movs	r3, #64	; 0x40
 80031a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b6:	6a38      	ldr	r0, [r7, #32]
 80031b8:	f002 f8aa 	bl	8005310 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	3338      	adds	r3, #56	; 0x38
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	3304      	adds	r3, #4
 80031ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	78db      	ldrb	r3, [r3, #3]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d108      	bne.n	80031ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f005 fccd 	bl	8008b84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f6:	461a      	mov	r2, r3
 80031f8:	2302      	movs	r3, #2
 80031fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fd08 	bl	8003c1e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	3301      	adds	r3, #1
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f af2e 	bne.w	800307e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f003 f894 	bl	8006354 <USB_ReadInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003236:	d122      	bne.n	800327e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800325e:	2100      	movs	r1, #0
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f005 fe4b 	bl	8008efc <HAL_PCDEx_LPM_Callback>
 8003266:	e002      	b.n	800326e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f005 fc6b 	bl	8008b44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800327c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f003 f866 	bl	8006354 <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003292:	d112      	bne.n	80032ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d102      	bne.n	80032aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f005 fc27 	bl	8008af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032b8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 f848 	bl	8006354 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ce:	d121      	bne.n	8003314 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80032de:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d111      	bne.n	800330e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003304:	2101      	movs	r1, #1
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f005 fdf8 	bl	8008efc <HAL_PCDEx_LPM_Callback>
 800330c:	e002      	b.n	8003314 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f005 fbf2 	bl	8008af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f003 f81b 	bl	8006354 <USB_ReadInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003328:	f040 80b7 	bne.w	800349a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2110      	movs	r1, #16
 8003346:	4618      	mov	r0, r3
 8003348:	f001 ffe2 	bl	8005310 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003350:	e046      	b.n	80033e0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335e:	461a      	mov	r2, r3
 8003360:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003364:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003376:	0151      	lsls	r1, r2, #5
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	440a      	add	r2, r1
 800337c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003380:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003384:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	461a      	mov	r2, r3
 8003394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003398:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033aa:	0151      	lsls	r1, r2, #5
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	440a      	add	r2, r1
 80033b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ca:	0151      	lsls	r1, r2, #5
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	440a      	add	r2, r1
 80033d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	3301      	adds	r3, #1
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d3b3      	bcc.n	8003352 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003416:	f043 030b 	orr.w	r3, r3, #11
 800341a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800342c:	f043 030b 	orr.w	r3, r3, #11
 8003430:	6453      	str	r3, [r2, #68]	; 0x44
 8003432:	e015      	b.n	8003460 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003446:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800344a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800345a:	f043 030b 	orr.w	r3, r3, #11
 800345e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003472:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003484:	461a      	mov	r2, r3
 8003486:	f003 f829 	bl	80064dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 ff58 	bl	8006354 <USB_ReadInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ae:	d124      	bne.n	80034fa <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 ffee 	bl	8006496 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 ffa3 	bl	800540a <USB_GetDevSpeed>
 80034c4:	4603      	mov	r3, r0
 80034c6:	461a      	mov	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681c      	ldr	r4, [r3, #0]
 80034d0:	f000 ffd4 	bl	800447c <HAL_RCC_GetHCLKFreq>
 80034d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	4620      	mov	r0, r4
 80034e0:	f001 fca8 	bl	8004e34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f005 fae8 	bl	8008aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 ff28 	bl	8006354 <USB_ReadInterrupts>
 8003504:	4603      	mov	r3, r0
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b08      	cmp	r3, #8
 800350c:	d10a      	bne.n	8003524 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f005 fac5 	bl	8008a9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f002 0208 	and.w	r2, r2, #8
 8003522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f002 ff13 	bl	8006354 <USB_ReadInterrupts>
 800352e:	4603      	mov	r3, r0
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d122      	bne.n	800357e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003544:	2301      	movs	r3, #1
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
 8003548:	e014      	b.n	8003574 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	b2db      	uxtb	r3, r3
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fb27 	bl	8003bbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	3301      	adds	r3, #1
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357a:	429a      	cmp	r2, r3
 800357c:	d3e5      	bcc.n	800354a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f002 fee6 	bl	8006354 <USB_ReadInterrupts>
 8003588:	4603      	mov	r3, r0
 800358a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003592:	d13b      	bne.n	800360c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003594:	2301      	movs	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
 8003598:	e02b      	b.n	80035f2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3340      	adds	r3, #64	; 0x40
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d115      	bne.n	80035ec <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da12      	bge.n	80035ec <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	333f      	adds	r3, #63	; 0x3f
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	4619      	mov	r1, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fae8 	bl	8003bbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	3301      	adds	r3, #1
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d3ce      	bcc.n	800359a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800360a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f002 fe9f 	bl	8006354 <USB_ReadInterrupts>
 8003616:	4603      	mov	r3, r0
 8003618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003620:	d155      	bne.n	80036ce <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003622:	2301      	movs	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
 8003626:	e045      	b.n	80036b4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d12e      	bne.n	80036ae <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003650:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003652:	2b00      	cmp	r3, #0
 8003654:	da2b      	bge.n	80036ae <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003662:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003666:	429a      	cmp	r2, r3
 8003668:	d121      	bne.n	80036ae <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10a      	bne.n	80036ae <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036aa:	6053      	str	r3, [r2, #4]
            break;
 80036ac:	e007      	b.n	80036be <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	3301      	adds	r3, #1
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d3b4      	bcc.n	8003628 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 fe3e 	bl	8006354 <USB_ReadInterrupts>
 80036d8:	4603      	mov	r3, r0
 80036da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e2:	d10a      	bne.n	80036fa <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f005 fa5f 	bl	8008ba8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f002 fe28 	bl	8006354 <USB_ReadInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b04      	cmp	r3, #4
 800370c:	d115      	bne.n	800373a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f005 fa4f 	bl	8008bc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	e000      	b.n	800373a <HAL_PCD_IRQHandler+0x992>
      return;
 8003738:	bf00      	nop
    }
  }
}
 800373a:	3734      	adds	r7, #52	; 0x34
 800373c:	46bd      	mov	sp, r7
 800373e:	bd90      	pop	{r4, r7, pc}

08003740 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_PCD_SetAddress+0x1a>
 8003756:	2302      	movs	r3, #2
 8003758:	e013      	b.n	8003782 <HAL_PCD_SetAddress+0x42>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f002 fd86 	bl	8006284 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	4608      	mov	r0, r1
 8003794:	4611      	mov	r1, r2
 8003796:	461a      	mov	r2, r3
 8003798:	4603      	mov	r3, r0
 800379a:	70fb      	strb	r3, [r7, #3]
 800379c:	460b      	mov	r3, r1
 800379e:	803b      	strh	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	da0f      	bge.n	80037d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	f003 020f 	and.w	r2, r3, #15
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	3338      	adds	r3, #56	; 0x38
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4413      	add	r3, r2
 80037c4:	3304      	adds	r3, #4
 80037c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	705a      	strb	r2, [r3, #1]
 80037ce:	e00f      	b.n	80037f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 020f 	and.w	r2, r3, #15
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037fc:	883a      	ldrh	r2, [r7, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	78ba      	ldrb	r2, [r7, #2]
 8003806:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800381a:	78bb      	ldrb	r3, [r7, #2]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d102      	bne.n	8003826 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_PCD_EP_Open+0xaa>
 8003830:	2302      	movs	r3, #2
 8003832:	e00e      	b.n	8003852 <HAL_PCD_EP_Open+0xc8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fe06 	bl	8005454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003850:	7afb      	ldrb	r3, [r7, #11]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386a:	2b00      	cmp	r3, #0
 800386c:	da0f      	bge.n	800388e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	3338      	adds	r3, #56	; 0x38
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	3304      	adds	r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	705a      	strb	r2, [r3, #1]
 800388c:	e00f      	b.n	80038ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_PCD_EP_Close+0x6e>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e00e      	b.n	80038e6 <HAL_PCD_EP_Close+0x8c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68f9      	ldr	r1, [r7, #12]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fe44 	bl	8005564 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	460b      	mov	r3, r1
 80038fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038fe:	7afb      	ldrb	r3, [r7, #11]
 8003900:	f003 020f 	and.w	r2, r3, #15
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	3304      	adds	r3, #4
 8003916:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003930:	7afb      	ldrb	r3, [r7, #11]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	b2da      	uxtb	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d102      	bne.n	800394a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800394a:	7afb      	ldrb	r3, [r7, #11]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	6979      	ldr	r1, [r7, #20]
 8003962:	f002 f923 	bl	8005bac <USB_EP0StartXfer>
 8003966:	e008      	b.n	800397a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	6979      	ldr	r1, [r7, #20]
 8003976:	f001 fed1 	bl	800571c <USB_EPStartXfer>
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	460b      	mov	r3, r1
 80039c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c4:	7afb      	ldrb	r3, [r7, #11]
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	3338      	adds	r3, #56	; 0x38
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2200      	movs	r2, #0
 80039ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2201      	movs	r2, #1
 80039f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f4:	7afb      	ldrb	r3, [r7, #11]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d102      	bne.n	8003a0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a0e:	7afb      	ldrb	r3, [r7, #11]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	6979      	ldr	r1, [r7, #20]
 8003a26:	f002 f8c1 	bl	8005bac <USB_EP0StartXfer>
 8003a2a:	e008      	b.n	8003a3e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	6979      	ldr	r1, [r7, #20]
 8003a3a:	f001 fe6f 	bl	800571c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 020f 	and.w	r2, r3, #15
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d901      	bls.n	8003a66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e050      	b.n	8003b08 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da0f      	bge.n	8003a8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	3338      	adds	r3, #56	; 0x38
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	705a      	strb	r2, [r3, #1]
 8003a8c:	e00d      	b.n	8003aaa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_PCD_EP_SetStall+0x82>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e01e      	b.n	8003b08 <HAL_PCD_EP_SetStall+0xc0>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f002 faff 	bl	80060dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	b2d9      	uxtb	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003af8:	461a      	mov	r2, r3
 8003afa:	f002 fcef 	bl	80064dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	f003 020f 	and.w	r2, r3, #15
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d901      	bls.n	8003b2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e042      	b.n	8003bb4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	da0f      	bge.n	8003b56 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	f003 020f 	and.w	r2, r3, #15
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	3338      	adds	r3, #56	; 0x38
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	705a      	strb	r2, [r3, #1]
 8003b54:	e00f      	b.n	8003b76 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_PCD_EP_ClrStall+0x86>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e00e      	b.n	8003bb4 <HAL_PCD_EP_ClrStall+0xa4>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68f9      	ldr	r1, [r7, #12]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f002 fb07 	bl	80061b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da0c      	bge.n	8003bea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 020f 	and.w	r2, r3, #15
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	3338      	adds	r3, #56	; 0x38
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e00c      	b.n	8003c04 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	3304      	adds	r3, #4
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68f9      	ldr	r1, [r7, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f002 f926 	bl	8005e5c <USB_EPStopXfer>
 8003c10:	4603      	mov	r3, r0
 8003c12:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c14:	7afb      	ldrb	r3, [r7, #11]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b08a      	sub	sp, #40	; 0x28
 8003c22:	af02      	add	r7, sp, #8
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	3338      	adds	r3, #56	; 0x38
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	3304      	adds	r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1a      	ldr	r2, [r3, #32]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d901      	bls.n	8003c56 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06c      	b.n	8003d30 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d902      	bls.n	8003c72 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3303      	adds	r3, #3
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c7a:	e02b      	b.n	8003cd4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d902      	bls.n	8003c98 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	3303      	adds	r3, #3
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6919      	ldr	r1, [r3, #16]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	6978      	ldr	r0, [r7, #20]
 8003cb8:	f002 f97a 	bl	8005fb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1a      	ldr	r2, [r3, #32]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	441a      	add	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d809      	bhi.n	8003cfe <PCD_WriteEmptyTxFifo+0xe0>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d203      	bcs.n	8003cfe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1be      	bne.n	8003c7c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d811      	bhi.n	8003d2e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	2201      	movs	r2, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	43db      	mvns	r3, r3
 8003d24:	6939      	ldr	r1, [r7, #16]
 8003d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	333c      	adds	r3, #60	; 0x3c
 8003d50:	3304      	adds	r3, #4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d17b      	bne.n	8003e66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d015      	beq.n	8003da4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4a61      	ldr	r2, [pc, #388]	; (8003f00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	f240 80b9 	bls.w	8003ef4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80b3 	beq.w	8003ef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da0:	6093      	str	r3, [r2, #8]
 8003da2:	e0a7      	b.n	8003ef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2320      	movs	r3, #32
 8003dbe:	6093      	str	r3, [r2, #8]
 8003dc0:	e098      	b.n	8003ef4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f040 8093 	bne.w	8003ef4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4a4b      	ldr	r2, [pc, #300]	; (8003f00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d90f      	bls.n	8003df6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	461a      	mov	r2, r3
 8003dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df2:	6093      	str	r3, [r2, #8]
 8003df4:	e07e      	b.n	8003ef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4413      	add	r3, r2
 8003e08:	3304      	adds	r3, #4
 8003e0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	0159      	lsls	r1, r3, #5
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	440b      	add	r3, r1
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e22:	1ad2      	subs	r2, r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d114      	bne.n	8003e58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e40:	461a      	mov	r2, r3
 8003e42:	2101      	movs	r1, #1
 8003e44:	f002 fb4a 	bl	80064dc <USB_EP0_OutStart>
 8003e48:	e006      	b.n	8003e58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f004 fde8 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
 8003e64:	e046      	b.n	8003ef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d124      	bne.n	8003eb8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	461a      	mov	r2, r3
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	6093      	str	r3, [r2, #8]
 8003e8c:	e032      	b.n	8003ef4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f004 fdbf 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
 8003eb6:	e01d      	b.n	8003ef4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d114      	bne.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d108      	bne.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	f002 fafa 	bl	80064dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f004 fda0 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	4f54300a 	.word	0x4f54300a
 8003f04:	4f54310a 	.word	0x4f54310a

08003f08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	333c      	adds	r3, #60	; 0x3c
 8003f20:	3304      	adds	r3, #4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d90e      	bls.n	8003f5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f54:	461a      	mov	r2, r3
 8003f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f004 fd57 	bl	8008a10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d90c      	bls.n	8003f84 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d108      	bne.n	8003f84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2101      	movs	r1, #1
 8003f80:	f002 faac 	bl	80064dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	4f54300a 	.word	0x4f54300a

08003f94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fb2:	883b      	ldrh	r3, [r7, #0]
 8003fb4:	0419      	lsls	r1, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc0:	e028      	b.n	8004014 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	4413      	add	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]
 8003fd4:	e00d      	b.n	8003ff2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	3340      	adds	r3, #64	; 0x40
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	0c1b      	lsrs	r3, r3, #16
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4413      	add	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
 8003ff2:	7bfa      	ldrb	r2, [r7, #15]
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d3ec      	bcc.n	8003fd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ffc:	883b      	ldrh	r3, [r7, #0]
 8003ffe:	0418      	lsls	r0, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6819      	ldr	r1, [r3, #0]
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	3b01      	subs	r3, #1
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	4302      	orrs	r2, r0
 800400c:	3340      	adds	r3, #64	; 0x40
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004076:	f043 0303 	orr.w	r3, r3, #3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0cc      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a0:	4b68      	ldr	r3, [pc, #416]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d90c      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b65      	ldr	r3, [pc, #404]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b63      	ldr	r3, [pc, #396]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0b8      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e0:	4b59      	ldr	r3, [pc, #356]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a58      	ldr	r2, [pc, #352]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f8:	4b53      	ldr	r3, [pc, #332]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a52      	ldr	r2, [pc, #328]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b50      	ldr	r3, [pc, #320]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	494d      	ldr	r1, [pc, #308]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d044      	beq.n	80041ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d119      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d003      	beq.n	800414a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004146:	2b03      	cmp	r3, #3
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415a:	4b3b      	ldr	r3, [pc, #236]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e067      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b37      	ldr	r3, [pc, #220]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4934      	ldr	r1, [pc, #208]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800417c:	f7fc ff82 	bl	8001084 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fc ff7e 	bl	8001084 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d20c      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e032      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4916      	ldr	r1, [pc, #88]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	490e      	ldr	r1, [pc, #56]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004212:	f000 f82d 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 8004216:	4602      	mov	r2, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	490a      	ldr	r1, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	5ccb      	ldrb	r3, [r1, r3]
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	4a09      	ldr	r2, [pc, #36]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HAL_RCC_ClockConfig+0x1c8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc fee2 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023c00 	.word	0x40023c00
 8004248:	40023800 	.word	0x40023800
 800424c:	080091b8 	.word	0x080091b8
 8004250:	20000000 	.word	0x20000000
 8004254:	20000004 	.word	0x20000004

08004258 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <HAL_RCC_EnableCSS+0x14>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	4247004c 	.word	0x4247004c

08004270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004274:	b094      	sub	sp, #80	; 0x50
 8004276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	647b      	str	r3, [r7, #68]	; 0x44
 800427c:	2300      	movs	r3, #0
 800427e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004280:	2300      	movs	r3, #0
 8004282:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004288:	4b79      	ldr	r3, [pc, #484]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b08      	cmp	r3, #8
 8004292:	d00d      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004294:	2b08      	cmp	r3, #8
 8004296:	f200 80e1 	bhi.w	800445c <HAL_RCC_GetSysClockFreq+0x1ec>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x34>
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x3a>
 80042a2:	e0db      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b73      	ldr	r3, [pc, #460]	; (8004474 <HAL_RCC_GetSysClockFreq+0x204>)
 80042a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042a8:	e0db      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042aa:	4b73      	ldr	r3, [pc, #460]	; (8004478 <HAL_RCC_GetSysClockFreq+0x208>)
 80042ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ae:	e0d8      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b0:	4b6f      	ldr	r3, [pc, #444]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ba:	4b6d      	ldr	r3, [pc, #436]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d063      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	2200      	movs	r2, #0
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d8:	633b      	str	r3, [r7, #48]	; 0x30
 80042da:	2300      	movs	r3, #0
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
 80042de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042e2:	4622      	mov	r2, r4
 80042e4:	462b      	mov	r3, r5
 80042e6:	f04f 0000 	mov.w	r0, #0
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	0159      	lsls	r1, r3, #5
 80042f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f4:	0150      	lsls	r0, r2, #5
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4621      	mov	r1, r4
 80042fc:	1a51      	subs	r1, r2, r1
 80042fe:	6139      	str	r1, [r7, #16]
 8004300:	4629      	mov	r1, r5
 8004302:	eb63 0301 	sbc.w	r3, r3, r1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004314:	4659      	mov	r1, fp
 8004316:	018b      	lsls	r3, r1, #6
 8004318:	4651      	mov	r1, sl
 800431a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800431e:	4651      	mov	r1, sl
 8004320:	018a      	lsls	r2, r1, #6
 8004322:	4651      	mov	r1, sl
 8004324:	ebb2 0801 	subs.w	r8, r2, r1
 8004328:	4659      	mov	r1, fp
 800432a:	eb63 0901 	sbc.w	r9, r3, r1
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004342:	4690      	mov	r8, r2
 8004344:	4699      	mov	r9, r3
 8004346:	4623      	mov	r3, r4
 8004348:	eb18 0303 	adds.w	r3, r8, r3
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	462b      	mov	r3, r5
 8004350:	eb49 0303 	adc.w	r3, r9, r3
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004362:	4629      	mov	r1, r5
 8004364:	024b      	lsls	r3, r1, #9
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800436c:	4621      	mov	r1, r4
 800436e:	024a      	lsls	r2, r1, #9
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004376:	2200      	movs	r2, #0
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
 800437a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800437c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004380:	f7fb ff48 	bl	8000214 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438c:	e058      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b38      	ldr	r3, [pc, #224]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	2200      	movs	r2, #0
 8004396:	4618      	mov	r0, r3
 8004398:	4611      	mov	r1, r2
 800439a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800439e:	623b      	str	r3, [r7, #32]
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
 80043a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	f04f 0000 	mov.w	r0, #0
 80043b0:	f04f 0100 	mov.w	r1, #0
 80043b4:	0159      	lsls	r1, r3, #5
 80043b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ba:	0150      	lsls	r0, r2, #5
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4641      	mov	r1, r8
 80043c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80043c6:	4649      	mov	r1, r9
 80043c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043e0:	ebb2 040a 	subs.w	r4, r2, sl
 80043e4:	eb63 050b 	sbc.w	r5, r3, fp
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	00eb      	lsls	r3, r5, #3
 80043f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f6:	00e2      	lsls	r2, r4, #3
 80043f8:	4614      	mov	r4, r2
 80043fa:	461d      	mov	r5, r3
 80043fc:	4643      	mov	r3, r8
 80043fe:	18e3      	adds	r3, r4, r3
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	464b      	mov	r3, r9
 8004404:	eb45 0303 	adc.w	r3, r5, r3
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004416:	4629      	mov	r1, r5
 8004418:	028b      	lsls	r3, r1, #10
 800441a:	4621      	mov	r1, r4
 800441c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004420:	4621      	mov	r1, r4
 8004422:	028a      	lsls	r2, r1, #10
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442a:	2200      	movs	r2, #0
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	61fa      	str	r2, [r7, #28]
 8004430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004434:	f7fb feee 	bl	8000214 <__aeabi_uldivmod>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4613      	mov	r3, r2
 800443e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCC_GetSysClockFreq+0x200>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	3301      	adds	r3, #1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004450:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800445a:	e002      	b.n	8004462 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCC_GetSysClockFreq+0x204>)
 800445e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004464:	4618      	mov	r0, r3
 8004466:	3750      	adds	r7, #80	; 0x50
 8004468:	46bd      	mov	sp, r7
 800446a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800
 8004474:	00f42400 	.word	0x00f42400
 8004478:	007a1200 	.word	0x007a1200

0800447c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <HAL_RCC_GetHCLKFreq+0x14>)
 8004482:	681b      	ldr	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000000 	.word	0x20000000

08004494 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d104      	bne.n	80044ae <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80044a4:	f000 f80a 	bl	80044bc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80044aa:	2280      	movs	r2, #128	; 0x80
 80044ac:	701a      	strb	r2, [r3, #0]
  }
}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	4002380e 	.word	0x4002380e

080044bc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d010      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80044ec:	4b87      	ldr	r3, [pc, #540]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4984      	ldr	r1, [pc, #528]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 800450a:	2301      	movs	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800451a:	4b7c      	ldr	r3, [pc, #496]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800451c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004520:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	4978      	ldr	r1, [pc, #480]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8004538:	2301      	movs	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8083 	beq.w	8004650 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	4a6e      	ldr	r2, [pc, #440]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004558:	6413      	str	r3, [r2, #64]	; 0x40
 800455a:	4b6c      	ldr	r3, [pc, #432]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004566:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a69      	ldr	r2, [pc, #420]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004572:	f7fc fd87 	bl	8001084 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800457a:	f7fc fd83 	bl	8001084 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e162      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800458c:	4b60      	ldr	r3, [pc, #384]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004598:	4b5c      	ldr	r3, [pc, #368]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a0:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d02f      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d028      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045b6:	4b55      	ldr	r3, [pc, #340]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045be:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045c0:	4b54      	ldr	r3, [pc, #336]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045c6:	4b53      	ldr	r3, [pc, #332]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045cc:	4a4f      	ldr	r2, [pc, #316]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045d2:	4b4e      	ldr	r3, [pc, #312]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d114      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045de:	f7fc fd51 	bl	8001084 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fc fd4d 	bl	8001084 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e12a      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ee      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004614:	d10d      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004616:	4b3d      	ldr	r3, [pc, #244]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462a:	4938      	ldr	r1, [pc, #224]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800462c:	4313      	orrs	r3, r2
 800462e:	608b      	str	r3, [r1, #8]
 8004630:	e005      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004632:	4b36      	ldr	r3, [pc, #216]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4a35      	ldr	r2, [pc, #212]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004638:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800463c:	6093      	str	r3, [r2, #8]
 800463e:	4b33      	ldr	r3, [pc, #204]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004640:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464a:	4930      	ldr	r1, [pc, #192]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800464c:	4313      	orrs	r3, r2
 800464e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004662:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004664:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004672:	4b26      	ldr	r3, [pc, #152]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004678:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	4922      	ldr	r1, [pc, #136]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d011      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004694:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	491a      	ldr	r1, [pc, #104]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b2:	d101      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	490e      	ldr	r1, [pc, #56]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d004      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b80      	cmp	r3, #128	; 0x80
 80046e6:	f040 8091 	bne.w	800480c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046f0:	f7fc fcc8 	bl	8001084 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046f6:	e013      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046f8:	f7fc fcc4 	bl	8001084 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d90c      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e0a3      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
 8004710:	40007000 	.word	0x40007000
 8004714:	42470e40 	.word	0x42470e40
 8004718:	424711e0 	.word	0x424711e0
 800471c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004720:	4b4e      	ldr	r3, [pc, #312]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800472c:	4a4c      	ldr	r2, [pc, #304]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004732:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d023      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d019      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004770:	d00e      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800477a:	2b00      	cmp	r3, #0
 800477c:	d019      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d115      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478e:	d110      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	071b      	lsls	r3, r3, #28
 80047aa:	492c      	ldr	r1, [pc, #176]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d010      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	019b      	lsls	r3, r3, #6
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	071b      	lsls	r3, r3, #28
 80047d8:	4920      	ldr	r1, [pc, #128]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047e0:	4b20      	ldr	r3, [pc, #128]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047e6:	f7fc fc4d 	bl	8001084 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047ee:	f7fc fc49 	bl	8001084 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e028      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004800:	4b16      	ldr	r3, [pc, #88]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004818:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800481a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800481e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	490d      	ldr	r1, [pc, #52]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800483c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004840:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	4904      	ldr	r1, [pc, #16]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800
 8004860:	424710d8 	.word	0x424710d8
 8004864:	42470068 	.word	0x42470068

08004868 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e273      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d075      	beq.n	8004972 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004886:	4b88      	ldr	r3, [pc, #544]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b04      	cmp	r3, #4
 8004890:	d00c      	beq.n	80048ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004892:	4b85      	ldr	r3, [pc, #532]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800489a:	2b08      	cmp	r3, #8
 800489c:	d112      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489e:	4b82      	ldr	r3, [pc, #520]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048aa:	d10b      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ac:	4b7e      	ldr	r3, [pc, #504]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d05b      	beq.n	8004970 <HAL_RCC_OscConfig+0x108>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d157      	bne.n	8004970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e24e      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d106      	bne.n	80048dc <HAL_RCC_OscConfig+0x74>
 80048ce:	4b76      	ldr	r3, [pc, #472]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a75      	ldr	r2, [pc, #468]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e01d      	b.n	8004918 <HAL_RCC_OscConfig+0xb0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x98>
 80048e6:	4b70      	ldr	r3, [pc, #448]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6f      	ldr	r2, [pc, #444]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a6c      	ldr	r2, [pc, #432]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e00b      	b.n	8004918 <HAL_RCC_OscConfig+0xb0>
 8004900:	4b69      	ldr	r3, [pc, #420]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a68      	ldr	r2, [pc, #416]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	4b66      	ldr	r3, [pc, #408]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a65      	ldr	r2, [pc, #404]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d013      	beq.n	8004948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fc fbb0 	bl	8001084 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004928:	f7fc fbac 	bl	8001084 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	; 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e213      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	4b5b      	ldr	r3, [pc, #364]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0xc0>
 8004946:	e014      	b.n	8004972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fc fb9c 	bl	8001084 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004950:	f7fc fb98 	bl	8001084 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e1ff      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	4b51      	ldr	r3, [pc, #324]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0xe8>
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d063      	beq.n	8004a46 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800497e:	4b4a      	ldr	r3, [pc, #296]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498a:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004992:	2b08      	cmp	r3, #8
 8004994:	d11c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004996:	4b44      	ldr	r3, [pc, #272]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d116      	bne.n	80049d0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_RCC_OscConfig+0x152>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d001      	beq.n	80049ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e1d3      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ba:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4937      	ldr	r1, [pc, #220]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ce:	e03a      	b.n	8004a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d8:	4b34      	ldr	r3, [pc, #208]	; (8004aac <HAL_RCC_OscConfig+0x244>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fc fb51 	bl	8001084 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fc fb4d 	bl	8001084 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e1b4      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4925      	ldr	r1, [pc, #148]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]
 8004a18:	e015      	b.n	8004a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_RCC_OscConfig+0x244>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fc fb30 	bl	8001084 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a28:	f7fc fb2c 	bl	8001084 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e193      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d036      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5a:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <HAL_RCC_OscConfig+0x248>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fc fb10 	bl	8001084 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a68:	f7fc fb0c 	bl	8001084 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e173      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x200>
 8004a86:	e01b      	b.n	8004ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_RCC_OscConfig+0x248>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8e:	f7fc faf9 	bl	8001084 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a94:	e00e      	b.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a96:	f7fc faf5 	bl	8001084 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d907      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e15c      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	42470000 	.word	0x42470000
 8004ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab4:	4b8a      	ldr	r3, [pc, #552]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ea      	bne.n	8004a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8097 	beq.w	8004bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ad2:	4b83      	ldr	r3, [pc, #524]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10f      	bne.n	8004afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	4b7f      	ldr	r3, [pc, #508]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	4a7e      	ldr	r2, [pc, #504]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aec:	6413      	str	r3, [r2, #64]	; 0x40
 8004aee:	4b7c      	ldr	r3, [pc, #496]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afa:	2301      	movs	r3, #1
 8004afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afe:	4b79      	ldr	r3, [pc, #484]	; (8004ce4 <HAL_RCC_OscConfig+0x47c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d118      	bne.n	8004b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b0a:	4b76      	ldr	r3, [pc, #472]	; (8004ce4 <HAL_RCC_OscConfig+0x47c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a75      	ldr	r2, [pc, #468]	; (8004ce4 <HAL_RCC_OscConfig+0x47c>)
 8004b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b16:	f7fc fab5 	bl	8001084 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1e:	f7fc fab1 	bl	8001084 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e118      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	4b6c      	ldr	r3, [pc, #432]	; (8004ce4 <HAL_RCC_OscConfig+0x47c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d106      	bne.n	8004b52 <HAL_RCC_OscConfig+0x2ea>
 8004b44:	4b66      	ldr	r3, [pc, #408]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	4a65      	ldr	r2, [pc, #404]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b50:	e01c      	b.n	8004b8c <HAL_RCC_OscConfig+0x324>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b05      	cmp	r3, #5
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x30c>
 8004b5a:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a60      	ldr	r2, [pc, #384]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b60:	f043 0304 	orr.w	r3, r3, #4
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
 8004b66:	4b5e      	ldr	r3, [pc, #376]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a5d      	ldr	r2, [pc, #372]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
 8004b72:	e00b      	b.n	8004b8c <HAL_RCC_OscConfig+0x324>
 8004b74:	4b5a      	ldr	r3, [pc, #360]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	4a59      	ldr	r2, [pc, #356]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b7a:	f023 0301 	bic.w	r3, r3, #1
 8004b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b80:	4b57      	ldr	r3, [pc, #348]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	4a56      	ldr	r2, [pc, #344]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004b86:	f023 0304 	bic.w	r3, r3, #4
 8004b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d015      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fc fa76 	bl	8001084 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fc fa72 	bl	8001084 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0d7      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	4b4b      	ldr	r3, [pc, #300]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0ee      	beq.n	8004b9c <HAL_RCC_OscConfig+0x334>
 8004bbe:	e014      	b.n	8004bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fc fa60 	bl	8001084 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc8:	f7fc fa5c 	bl	8001084 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e0c1      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bde:	4b40      	ldr	r3, [pc, #256]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ee      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d105      	bne.n	8004bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	4a3a      	ldr	r2, [pc, #232]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80ad 	beq.w	8004d60 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d060      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d145      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <HAL_RCC_OscConfig+0x480>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fc fa30 	bl	8001084 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fc fa2c 	bl	8001084 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e093      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	019b      	lsls	r3, r3, #6
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	041b      	lsls	r3, r3, #16
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	071b      	lsls	r3, r3, #28
 8004c72:	491b      	ldr	r1, [pc, #108]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c78:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <HAL_RCC_OscConfig+0x480>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fc fa01 	bl	8001084 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c86:	f7fc f9fd 	bl	8001084 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e064      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x41e>
 8004ca4:	e05c      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <HAL_RCC_OscConfig+0x480>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fc f9ea 	bl	8001084 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fc f9e6 	bl	8001084 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e04d      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCC_OscConfig+0x478>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x44c>
 8004cd2:	e045      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d107      	bne.n	8004cec <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e040      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40007000 	.word	0x40007000
 8004ce8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cec:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <HAL_RCC_OscConfig+0x504>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d030      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d129      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d122      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d119      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	3b01      	subs	r3, #1
 8004d36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d10f      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800

08004d70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d70:	b084      	sub	sp, #16
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	f107 001c 	add.w	r0, r7, #28
 8004d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d122      	bne.n	8004dce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d105      	bne.n	8004dc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f001 fbe8 	bl	8006598 <USB_CoreReset>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	73fb      	strb	r3, [r7, #15]
 8004dcc:	e01a      	b.n	8004e04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 fbdc 	bl	8006598 <USB_CoreReset>
 8004de0:	4603      	mov	r3, r0
 8004de2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
 8004df6:	e005      	b.n	8004e04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d10b      	bne.n	8004e22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f043 0206 	orr.w	r2, r3, #6
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f043 0220 	orr.w	r2, r3, #32
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e2e:	b004      	add	sp, #16
 8004e30:	4770      	bx	lr
	...

08004e34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d165      	bne.n	8004f14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4a41      	ldr	r2, [pc, #260]	; (8004f50 <USB_SetTurnaroundTime+0x11c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d906      	bls.n	8004e5e <USB_SetTurnaroundTime+0x2a>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4a40      	ldr	r2, [pc, #256]	; (8004f54 <USB_SetTurnaroundTime+0x120>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d202      	bcs.n	8004e5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e58:	230f      	movs	r3, #15
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e062      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4a3c      	ldr	r2, [pc, #240]	; (8004f54 <USB_SetTurnaroundTime+0x120>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d306      	bcc.n	8004e74 <USB_SetTurnaroundTime+0x40>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4a3b      	ldr	r2, [pc, #236]	; (8004f58 <USB_SetTurnaroundTime+0x124>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d202      	bcs.n	8004e74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e6e:	230e      	movs	r3, #14
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e057      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4a38      	ldr	r2, [pc, #224]	; (8004f58 <USB_SetTurnaroundTime+0x124>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d306      	bcc.n	8004e8a <USB_SetTurnaroundTime+0x56>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4a37      	ldr	r2, [pc, #220]	; (8004f5c <USB_SetTurnaroundTime+0x128>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d202      	bcs.n	8004e8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e84:	230d      	movs	r3, #13
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e04c      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4a33      	ldr	r2, [pc, #204]	; (8004f5c <USB_SetTurnaroundTime+0x128>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d306      	bcc.n	8004ea0 <USB_SetTurnaroundTime+0x6c>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4a32      	ldr	r2, [pc, #200]	; (8004f60 <USB_SetTurnaroundTime+0x12c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d802      	bhi.n	8004ea0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e041      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4a2f      	ldr	r2, [pc, #188]	; (8004f60 <USB_SetTurnaroundTime+0x12c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d906      	bls.n	8004eb6 <USB_SetTurnaroundTime+0x82>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4a2e      	ldr	r2, [pc, #184]	; (8004f64 <USB_SetTurnaroundTime+0x130>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d802      	bhi.n	8004eb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004eb0:	230b      	movs	r3, #11
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e036      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4a2a      	ldr	r2, [pc, #168]	; (8004f64 <USB_SetTurnaroundTime+0x130>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d906      	bls.n	8004ecc <USB_SetTurnaroundTime+0x98>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4a29      	ldr	r2, [pc, #164]	; (8004f68 <USB_SetTurnaroundTime+0x134>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d802      	bhi.n	8004ecc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e02b      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a26      	ldr	r2, [pc, #152]	; (8004f68 <USB_SetTurnaroundTime+0x134>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d906      	bls.n	8004ee2 <USB_SetTurnaroundTime+0xae>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <USB_SetTurnaroundTime+0x138>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d202      	bcs.n	8004ee2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004edc:	2309      	movs	r3, #9
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e020      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4a21      	ldr	r2, [pc, #132]	; (8004f6c <USB_SetTurnaroundTime+0x138>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d306      	bcc.n	8004ef8 <USB_SetTurnaroundTime+0xc4>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <USB_SetTurnaroundTime+0x13c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d802      	bhi.n	8004ef8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e015      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <USB_SetTurnaroundTime+0x13c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d906      	bls.n	8004f0e <USB_SetTurnaroundTime+0xda>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <USB_SetTurnaroundTime+0x140>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d202      	bcs.n	8004f0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f08:	2307      	movs	r3, #7
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e00a      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f0e:	2306      	movs	r3, #6
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e007      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f1a:	2309      	movs	r3, #9
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e001      	b.n	8004f24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f20:	2309      	movs	r3, #9
 8004f22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	029b      	lsls	r3, r3, #10
 8004f38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	00d8acbf 	.word	0x00d8acbf
 8004f54:	00e4e1c0 	.word	0x00e4e1c0
 8004f58:	00f42400 	.word	0x00f42400
 8004f5c:	01067380 	.word	0x01067380
 8004f60:	011a499f 	.word	0x011a499f
 8004f64:	01312cff 	.word	0x01312cff
 8004f68:	014ca43f 	.word	0x014ca43f
 8004f6c:	016e3600 	.word	0x016e3600
 8004f70:	01a6ab1f 	.word	0x01a6ab1f
 8004f74:	01e84800 	.word	0x01e84800

08004f78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f043 0201 	orr.w	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 0201 	bic.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d115      	bne.n	800500a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fea:	2001      	movs	r0, #1
 8004fec:	f7fc f856 	bl	800109c <HAL_Delay>
      ms++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fa3f 	bl	800647a <USB_GetMode>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d01e      	beq.n	8005040 <USB_SetCurrentMode+0x84>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b31      	cmp	r3, #49	; 0x31
 8005006:	d9f0      	bls.n	8004fea <USB_SetCurrentMode+0x2e>
 8005008:	e01a      	b.n	8005040 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d115      	bne.n	800503c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800501c:	2001      	movs	r0, #1
 800501e:	f7fc f83d 	bl	800109c <HAL_Delay>
      ms++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f001 fa26 	bl	800647a <USB_GetMode>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <USB_SetCurrentMode+0x84>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b31      	cmp	r3, #49	; 0x31
 8005038:	d9f0      	bls.n	800501c <USB_SetCurrentMode+0x60>
 800503a:	e001      	b.n	8005040 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e005      	b.n	800504c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b32      	cmp	r3, #50	; 0x32
 8005044:	d101      	bne.n	800504a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005054:	b084      	sub	sp, #16
 8005056:	b580      	push	{r7, lr}
 8005058:	b086      	sub	sp, #24
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e009      	b.n	8005088 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	3340      	adds	r3, #64	; 0x40
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	2200      	movs	r2, #0
 8005080:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	3301      	adds	r3, #1
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	2b0e      	cmp	r3, #14
 800508c:	d9f2      	bls.n	8005074 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800508e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d11c      	bne.n	80050ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a2:	f043 0302 	orr.w	r3, r3, #2
 80050a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e005      	b.n	80050da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050e0:	461a      	mov	r2, r3
 80050e2:	2300      	movs	r3, #0
 80050e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	4619      	mov	r1, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f4:	461a      	mov	r2, r3
 80050f6:	680b      	ldr	r3, [r1, #0]
 80050f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10c      	bne.n	800511a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d104      	bne.n	8005110 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005106:	2100      	movs	r1, #0
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f965 	bl	80053d8 <USB_SetDevSpeed>
 800510e:	e008      	b.n	8005122 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005110:	2101      	movs	r1, #1
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f960 	bl	80053d8 <USB_SetDevSpeed>
 8005118:	e003      	b.n	8005122 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800511a:	2103      	movs	r1, #3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f95b 	bl	80053d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005122:	2110      	movs	r1, #16
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8f3 	bl	8005310 <USB_FlushTxFifo>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f91f 	bl	8005378 <USB_FlushRxFifo>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005162:	461a      	mov	r2, r3
 8005164:	2300      	movs	r3, #0
 8005166:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	e043      	b.n	80051f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005184:	d118      	bne.n	80051b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	461a      	mov	r2, r3
 800519a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e013      	b.n	80051ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	461a      	mov	r2, r3
 80051b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e008      	b.n	80051ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	2300      	movs	r3, #0
 80051c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	461a      	mov	r2, r3
 80051d8:	2300      	movs	r3, #0
 80051da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	461a      	mov	r2, r3
 80051ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	3301      	adds	r3, #1
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3b7      	bcc.n	800516e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	e043      	b.n	800528c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800521a:	d118      	bne.n	800524e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	461a      	mov	r2, r3
 8005230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e013      	b.n	8005260 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005244:	461a      	mov	r2, r3
 8005246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e008      	b.n	8005260 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	461a      	mov	r2, r3
 800525c:	2300      	movs	r3, #0
 800525e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	461a      	mov	r2, r3
 800526e:	2300      	movs	r3, #0
 8005270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	461a      	mov	r2, r3
 8005280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3301      	adds	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	429a      	cmp	r2, r3
 8005292:	d3b7      	bcc.n	8005204 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f043 0210 	orr.w	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <USB_DevInit+0x2b8>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f043 0208 	orr.w	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d107      	bne.n	80052fc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f4:	f043 0304 	orr.w	r3, r3, #4
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005308:	b004      	add	sp, #16
 800530a:	4770      	bx	lr
 800530c:	803c3800 	.word	0x803c3800

08005310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4a13      	ldr	r2, [pc, #76]	; (8005374 <USB_FlushTxFifo+0x64>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e01b      	b.n	8005368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	daf2      	bge.n	800531e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	019b      	lsls	r3, r3, #6
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4a08      	ldr	r2, [pc, #32]	; (8005374 <USB_FlushTxFifo+0x64>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e006      	b.n	8005368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b20      	cmp	r3, #32
 8005364:	d0f0      	beq.n	8005348 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	00030d40 	.word	0x00030d40

08005378 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a11      	ldr	r2, [pc, #68]	; (80053d4 <USB_FlushRxFifo+0x5c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e018      	b.n	80053c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	daf2      	bge.n	8005384 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2210      	movs	r2, #16
 80053a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <USB_FlushRxFifo+0x5c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e006      	b.n	80053c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d0f0      	beq.n	80053a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	00030d40 	.word	0x00030d40

080053d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f8:	4313      	orrs	r3, r2
 80053fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800540a:	b480      	push	{r7}
 800540c:	b087      	sub	sp, #28
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0306 	and.w	r3, r3, #6
 8005422:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d102      	bne.n	8005430 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800542a:	2300      	movs	r3, #0
 800542c:	75fb      	strb	r3, [r7, #23]
 800542e:	e00a      	b.n	8005446 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d002      	beq.n	800543c <USB_GetDevSpeed+0x32>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d102      	bne.n	8005442 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800543c:	2302      	movs	r3, #2
 800543e:	75fb      	strb	r3, [r7, #23]
 8005440:	e001      	b.n	8005446 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005442:	230f      	movs	r3, #15
 8005444:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
}
 8005448:	4618      	mov	r0, r3
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d13a      	bne.n	80054e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	b29b      	uxth	r3, r3
 8005488:	68f9      	ldr	r1, [r7, #12]
 800548a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800548e:	4313      	orrs	r3, r2
 8005490:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d155      	bne.n	8005554 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	791b      	ldrb	r3, [r3, #4]
 80054c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	059b      	lsls	r3, r3, #22
 80054ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054cc:	4313      	orrs	r3, r2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	e036      	b.n	8005554 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	69da      	ldr	r2, [r3, #28]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	2101      	movs	r1, #1
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	041b      	lsls	r3, r3, #16
 80054fe:	68f9      	ldr	r1, [r7, #12]
 8005500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005504:	4313      	orrs	r3, r2
 8005506:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d11a      	bne.n	8005554 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	791b      	ldrb	r3, [r3, #4]
 8005538:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800553a:	430b      	orrs	r3, r1
 800553c:	4313      	orrs	r3, r2
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005552:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d161      	bne.n	8005644 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005596:	d11f      	bne.n	80055d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f8:	4013      	ands	r3, r2
 80055fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	2101      	movs	r1, #1
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800561c:	4013      	ands	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	0159      	lsls	r1, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	440b      	add	r3, r1
 8005636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563a:	4619      	mov	r1, r3
 800563c:	4b35      	ldr	r3, [pc, #212]	; (8005714 <USB_DeactivateEndpoint+0x1b0>)
 800563e:	4013      	ands	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
 8005642:	e060      	b.n	8005706 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800565a:	d11f      	bne.n	800569c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	0151      	lsls	r1, r2, #5
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	440a      	add	r2, r1
 8005672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800567a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	2101      	movs	r1, #1
 80056ae:	fa01 f303 	lsl.w	r3, r1, r3
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	43db      	mvns	r3, r3
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056bc:	4013      	ands	r3, r2
 80056be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	2101      	movs	r1, #1
 80056d2:	fa01 f303 	lsl.w	r3, r1, r3
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	43db      	mvns	r3, r3
 80056da:	68f9      	ldr	r1, [r7, #12]
 80056dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e0:	4013      	ands	r3, r2
 80056e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	0159      	lsls	r1, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	440b      	add	r3, r1
 80056fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fe:	4619      	mov	r1, r3
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <USB_DeactivateEndpoint+0x1b4>)
 8005702:	4013      	ands	r3, r2
 8005704:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	ec337800 	.word	0xec337800
 8005718:	eff37800 	.word	0xeff37800

0800571c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	2b01      	cmp	r3, #1
 800573a:	f040 815c 	bne.w	80059f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d132      	bne.n	80057ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005760:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005764:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	0cdb      	lsrs	r3, r3, #19
 80057a6:	04db      	lsls	r3, r3, #19
 80057a8:	6113      	str	r3, [r2, #16]
 80057aa:	e074      	b.n	8005896 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	0cdb      	lsrs	r3, r3, #19
 80057c8:	04db      	lsls	r3, r3, #19
 80057ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6999      	ldr	r1, [r3, #24]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	440b      	add	r3, r1
 8005808:	1e59      	subs	r1, r3, #1
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005812:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005814:	4b9d      	ldr	r3, [pc, #628]	; (8005a8c <USB_EPStartXfer+0x370>)
 8005816:	400b      	ands	r3, r1
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	0148      	lsls	r0, r1, #5
 800581c:	69f9      	ldr	r1, [r7, #28]
 800581e:	4401      	add	r1, r0
 8005820:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005824:	4313      	orrs	r3, r2
 8005826:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	0148      	lsls	r0, r1, #5
 8005842:	69f9      	ldr	r1, [r7, #28]
 8005844:	4401      	add	r1, r0
 8005846:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800584a:	4313      	orrs	r3, r2
 800584c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	791b      	ldrb	r3, [r3, #4]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d11f      	bne.n	8005896 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005870:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005874:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005890:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005894:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d14b      	bne.n	8005934 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d009      	beq.n	80058b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	791b      	ldrb	r3, [r3, #4]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d128      	bne.n	8005912 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d110      	bne.n	80058f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e00f      	b.n	8005912 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005910:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e133      	b.n	8005b9c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005952:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	791b      	ldrb	r3, [r3, #4]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d015      	beq.n	8005988 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 811b 	beq.w	8005b9c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	2101      	movs	r1, #1
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	69f9      	ldr	r1, [r7, #28]
 800597e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005982:	4313      	orrs	r3, r2
 8005984:	634b      	str	r3, [r1, #52]	; 0x34
 8005986:	e109      	b.n	8005b9c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d110      	bne.n	80059ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	e00f      	b.n	80059da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6919      	ldr	r1, [r3, #16]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	b298      	uxth	r0, r3
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4603      	mov	r3, r0
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fade 	bl	8005fb0 <USB_WritePacket>
 80059f4:	e0d2      	b.n	8005b9c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a10:	0cdb      	lsrs	r3, r3, #19
 8005a12:	04db      	lsls	r3, r3, #19
 8005a14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d126      	bne.n	8005a90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a58:	69b9      	ldr	r1, [r7, #24]
 8005a5a:	0148      	lsls	r0, r1, #5
 8005a5c:	69f9      	ldr	r1, [r7, #28]
 8005a5e:	4401      	add	r1, r0
 8005a60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a64:	4313      	orrs	r3, r2
 8005a66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a86:	6113      	str	r3, [r2, #16]
 8005a88:	e03a      	b.n	8005b00 <USB_EPStartXfer+0x3e4>
 8005a8a:	bf00      	nop
 8005a8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	699a      	ldr	r2, [r3, #24]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	1e5a      	subs	r2, r3, #1
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	8afa      	ldrh	r2, [r7, #22]
 8005aac:	fb03 f202 	mul.w	r2, r3, r2
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	8afb      	ldrh	r3, [r7, #22]
 8005ac4:	04d9      	lsls	r1, r3, #19
 8005ac6:	4b38      	ldr	r3, [pc, #224]	; (8005ba8 <USB_EPStartXfer+0x48c>)
 8005ac8:	400b      	ands	r3, r1
 8005aca:	69b9      	ldr	r1, [r7, #24]
 8005acc:	0148      	lsls	r0, r1, #5
 8005ace:	69f9      	ldr	r1, [r7, #28]
 8005ad0:	4401      	add	r1, r0
 8005ad2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af0:	69b9      	ldr	r1, [r7, #24]
 8005af2:	0148      	lsls	r0, r1, #5
 8005af4:	69f9      	ldr	r1, [r7, #28]
 8005af6:	4401      	add	r1, r0
 8005af8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005afc:	4313      	orrs	r3, r2
 8005afe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d10d      	bne.n	8005b22 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6919      	ldr	r1, [r3, #16]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	460a      	mov	r2, r1
 8005b20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	791b      	ldrb	r3, [r3, #4]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d128      	bne.n	8005b7c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d110      	bne.n	8005b5c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	e00f      	b.n	8005b7c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	1ff80000 	.word	0x1ff80000

08005bac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	f040 80ce 	bne.w	8005d6a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d132      	bne.n	8005c3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c34:	0cdb      	lsrs	r3, r3, #19
 8005c36:	04db      	lsls	r3, r3, #19
 8005c38:	6113      	str	r3, [r2, #16]
 8005c3a:	e04e      	b.n	8005cda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c56:	0cdb      	lsrs	r3, r3, #19
 8005c58:	04db      	lsls	r3, r3, #19
 8005c5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	0151      	lsls	r1, r2, #5
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	440a      	add	r2, r1
 8005c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	699a      	ldr	r2, [r3, #24]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d903      	bls.n	8005c94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cca:	6939      	ldr	r1, [r7, #16]
 8005ccc:	0148      	lsls	r0, r1, #5
 8005cce:	6979      	ldr	r1, [r7, #20]
 8005cd0:	4401      	add	r1, r0
 8005cd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d11e      	bne.n	8005d1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	e097      	b.n	8005e4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 8083 	beq.w	8005e4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	2101      	movs	r1, #1
 8005d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5e:	6979      	ldr	r1, [r7, #20]
 8005d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d64:	4313      	orrs	r3, r2
 8005d66:	634b      	str	r3, [r1, #52]	; 0x34
 8005d68:	e071      	b.n	8005e4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d84:	0cdb      	lsrs	r3, r3, #19
 8005d86:	04db      	lsls	r3, r3, #19
 8005d88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005de4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dfc:	6939      	ldr	r1, [r7, #16]
 8005dfe:	0148      	lsls	r0, r1, #5
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	4401      	add	r1, r0
 8005e04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d10d      	bne.n	8005e2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6919      	ldr	r1, [r3, #16]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d14a      	bne.n	8005f10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e92:	f040 8086 	bne.w	8005fa2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	7812      	ldrb	r2, [r2, #0]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005edc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d902      	bls.n	8005ef4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef2:	e056      	b.n	8005fa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f0c:	d0e7      	beq.n	8005ede <USB_EPStopXfer+0x82>
 8005f0e:	e048      	b.n	8005fa2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f28:	d13b      	bne.n	8005fa2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	7812      	ldrb	r2, [r2, #0]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d902      	bls.n	8005f88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
          break;
 8005f86:	e00c      	b.n	8005fa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa0:	d0e7      	beq.n	8005f72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b089      	sub	sp, #36	; 0x24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4611      	mov	r1, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	71fb      	strb	r3, [r7, #7]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d123      	bne.n	800601e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fd6:	88bb      	ldrh	r3, [r7, #4]
 8005fd8:	3303      	adds	r3, #3
 8005fda:	089b      	lsrs	r3, r3, #2
 8005fdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	e018      	b.n	8006016 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	031a      	lsls	r2, r3, #12
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3301      	adds	r3, #1
 8006002:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	3301      	adds	r3, #1
 8006008:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3301      	adds	r3, #1
 800600e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	3301      	adds	r3, #1
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	429a      	cmp	r2, r3
 800601c:	d3e2      	bcc.n	8005fe4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3724      	adds	r7, #36	; 0x24
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800602c:	b480      	push	{r7}
 800602e:	b08b      	sub	sp, #44	; 0x2c
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	089b      	lsrs	r3, r3, #2
 8006046:	b29b      	uxth	r3, r3
 8006048:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006052:	2300      	movs	r3, #0
 8006054:	623b      	str	r3, [r7, #32]
 8006056:	e014      	b.n	8006082 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	601a      	str	r2, [r3, #0]
    pDest++;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	3301      	adds	r3, #1
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	3301      	adds	r3, #1
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	3301      	adds	r3, #1
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	3301      	adds	r3, #1
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	3301      	adds	r3, #1
 8006080:	623b      	str	r3, [r7, #32]
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	429a      	cmp	r2, r3
 8006088:	d3e6      	bcc.n	8006058 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800608a:	8bfb      	ldrh	r3, [r7, #30]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01e      	beq.n	80060ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800609a:	461a      	mov	r2, r3
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	fa22 f303 	lsr.w	r3, r2, r3
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	701a      	strb	r2, [r3, #0]
      i++;
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	3301      	adds	r3, #1
 80060ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	3301      	adds	r3, #1
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060c2:	8bfb      	ldrh	r3, [r7, #30]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060c8:	8bfb      	ldrh	r3, [r7, #30]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1ea      	bne.n	80060a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	372c      	adds	r7, #44	; 0x2c
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d12c      	bne.n	8006152 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	db12      	blt.n	8006130 <USB_EPSetStall+0x54>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00f      	beq.n	8006130 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	440a      	add	r2, r1
 8006126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800612e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	e02b      	b.n	80061aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	db12      	blt.n	800618a <USB_EPSetStall+0xae>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00f      	beq.n	800618a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006184:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006188:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d128      	bne.n	8006226 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	791b      	ldrb	r3, [r3, #4]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d003      	beq.n	8006204 <USB_EPClearStall+0x4c>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	791b      	ldrb	r3, [r3, #4]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d138      	bne.n	8006276 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e027      	b.n	8006276 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006240:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006244:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d003      	beq.n	8006256 <USB_EPClearStall+0x9e>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	791b      	ldrb	r3, [r3, #4]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d10f      	bne.n	8006276 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006274:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062b8:	68f9      	ldr	r1, [r7, #12]
 80062ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062be:	4313      	orrs	r3, r2
 80062c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062fe:	f023 0302 	bic.w	r3, r3, #2
 8006302:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800632c:	f023 0303 	bic.w	r3, r3, #3
 8006330:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006340:	f043 0302 	orr.w	r3, r3, #2
 8006344:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4013      	ands	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800636c:	68fb      	ldr	r3, [r7, #12]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	4013      	ands	r3, r2
 800639c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	0c1b      	lsrs	r3, r3, #16
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	4013      	ands	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	b29b      	uxth	r3, r3
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4013      	ands	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006410:	68bb      	ldr	r3, [r7, #8]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	fa22 f303 	lsr.w	r3, r2, r3
 800644e:	01db      	lsls	r3, r3, #7
 8006450:	b2db      	uxtb	r3, r3
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4013      	ands	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800646c:	68bb      	ldr	r3, [r7, #8]
}
 800646e:	4618      	mov	r0, r3
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f003 0301 	and.w	r3, r3, #1
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064b4:	f023 0307 	bic.w	r3, r3, #7
 80064b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	460b      	mov	r3, r1
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	333c      	adds	r3, #60	; 0x3c
 80064f2:	3304      	adds	r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4a26      	ldr	r2, [pc, #152]	; (8006594 <USB_EP0_OutStart+0xb8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d90a      	bls.n	8006516 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800650c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006510:	d101      	bne.n	8006516 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	e037      	b.n	8006586 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	461a      	mov	r2, r3
 800651e:	2300      	movs	r3, #0
 8006520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006544:	f043 0318 	orr.w	r3, r3, #24
 8006548:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006558:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800655c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800655e:	7afb      	ldrb	r3, [r7, #11]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d10f      	bne.n	8006584 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	461a      	mov	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800657e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	4f54300a 	.word	0x4f54300a

08006598 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3301      	adds	r3, #1
 80065a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a13      	ldr	r2, [pc, #76]	; (80065fc <USB_CoreReset+0x64>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e01b      	b.n	80065ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	daf2      	bge.n	80065a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <USB_CoreReset+0x64>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d901      	bls.n	80065e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e006      	b.n	80065ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d0f0      	beq.n	80065ce <USB_CoreReset+0x36>

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	00030d40 	.word	0x00030d40

08006600 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800660c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006610:	f002 fcc2 	bl	8008f98 <USBD_static_malloc>
 8006614:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	32b0      	adds	r2, #176	; 0xb0
 8006626:	2100      	movs	r1, #0
 8006628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800662c:	2302      	movs	r3, #2
 800662e:	e0d4      	b.n	80067da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006630:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006634:	2100      	movs	r1, #0
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f002 fd4e 	bl	80090d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	32b0      	adds	r2, #176	; 0xb0
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32b0      	adds	r2, #176	; 0xb0
 8006656:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	7c1b      	ldrb	r3, [r3, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d138      	bne.n	80066da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006668:	4b5e      	ldr	r3, [pc, #376]	; (80067e4 <USBD_CDC_Init+0x1e4>)
 800666a:	7819      	ldrb	r1, [r3, #0]
 800666c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006670:	2202      	movs	r2, #2
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f002 fb1f 	bl	8008cb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006678:	4b5a      	ldr	r3, [pc, #360]	; (80067e4 <USBD_CDC_Init+0x1e4>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	f003 020f 	and.w	r2, r3, #15
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	3324      	adds	r3, #36	; 0x24
 800668e:	2201      	movs	r2, #1
 8006690:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006692:	4b55      	ldr	r3, [pc, #340]	; (80067e8 <USBD_CDC_Init+0x1e8>)
 8006694:	7819      	ldrb	r1, [r3, #0]
 8006696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800669a:	2202      	movs	r2, #2
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f002 fb0a 	bl	8008cb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066a2:	4b51      	ldr	r3, [pc, #324]	; (80067e8 <USBD_CDC_Init+0x1e8>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	f003 020f 	and.w	r2, r3, #15
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	440b      	add	r3, r1
 80066b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066ba:	2201      	movs	r2, #1
 80066bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066be:	4b4b      	ldr	r3, [pc, #300]	; (80067ec <USBD_CDC_Init+0x1ec>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f003 020f 	and.w	r2, r3, #15
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	3326      	adds	r3, #38	; 0x26
 80066d4:	2210      	movs	r2, #16
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	e035      	b.n	8006746 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066da:	4b42      	ldr	r3, [pc, #264]	; (80067e4 <USBD_CDC_Init+0x1e4>)
 80066dc:	7819      	ldrb	r1, [r3, #0]
 80066de:	2340      	movs	r3, #64	; 0x40
 80066e0:	2202      	movs	r2, #2
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f002 fae7 	bl	8008cb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066e8:	4b3e      	ldr	r3, [pc, #248]	; (80067e4 <USBD_CDC_Init+0x1e4>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	f003 020f 	and.w	r2, r3, #15
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	3324      	adds	r3, #36	; 0x24
 80066fe:	2201      	movs	r2, #1
 8006700:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006702:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <USBD_CDC_Init+0x1e8>)
 8006704:	7819      	ldrb	r1, [r3, #0]
 8006706:	2340      	movs	r3, #64	; 0x40
 8006708:	2202      	movs	r2, #2
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f002 fad3 	bl	8008cb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006710:	4b35      	ldr	r3, [pc, #212]	; (80067e8 <USBD_CDC_Init+0x1e8>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f003 020f 	and.w	r2, r3, #15
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006728:	2201      	movs	r2, #1
 800672a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800672c:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <USBD_CDC_Init+0x1ec>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 020f 	and.w	r2, r3, #15
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	3326      	adds	r3, #38	; 0x26
 8006742:	2210      	movs	r2, #16
 8006744:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006746:	4b29      	ldr	r3, [pc, #164]	; (80067ec <USBD_CDC_Init+0x1ec>)
 8006748:	7819      	ldrb	r1, [r3, #0]
 800674a:	2308      	movs	r3, #8
 800674c:	2203      	movs	r2, #3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f002 fab1 	bl	8008cb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006754:	4b25      	ldr	r3, [pc, #148]	; (80067ec <USBD_CDC_Init+0x1ec>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 020f 	and.w	r2, r3, #15
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	3324      	adds	r3, #36	; 0x24
 800676a:	2201      	movs	r2, #1
 800676c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	33b0      	adds	r3, #176	; 0xb0
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80067a4:	2302      	movs	r3, #2
 80067a6:	e018      	b.n	80067da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7c1b      	ldrb	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10a      	bne.n	80067c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067b0:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <USBD_CDC_Init+0x1e8>)
 80067b2:	7819      	ldrb	r1, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f002 fb68 	bl	8008e94 <USBD_LL_PrepareReceive>
 80067c4:	e008      	b.n	80067d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067c6:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <USBD_CDC_Init+0x1e8>)
 80067c8:	7819      	ldrb	r1, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d0:	2340      	movs	r3, #64	; 0x40
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f002 fb5e 	bl	8008e94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000093 	.word	0x20000093
 80067e8:	20000094 	.word	0x20000094
 80067ec:	20000095 	.word	0x20000095

080067f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067fc:	4b3a      	ldr	r3, [pc, #232]	; (80068e8 <USBD_CDC_DeInit+0xf8>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f002 fa7d 	bl	8008d02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006808:	4b37      	ldr	r3, [pc, #220]	; (80068e8 <USBD_CDC_DeInit+0xf8>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 020f 	and.w	r2, r3, #15
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	3324      	adds	r3, #36	; 0x24
 800681e:	2200      	movs	r2, #0
 8006820:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006822:	4b32      	ldr	r3, [pc, #200]	; (80068ec <USBD_CDC_DeInit+0xfc>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f002 fa6a 	bl	8008d02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800682e:	4b2f      	ldr	r3, [pc, #188]	; (80068ec <USBD_CDC_DeInit+0xfc>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	f003 020f 	and.w	r2, r3, #15
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006846:	2200      	movs	r2, #0
 8006848:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800684a:	4b29      	ldr	r3, [pc, #164]	; (80068f0 <USBD_CDC_DeInit+0x100>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f002 fa56 	bl	8008d02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006856:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <USBD_CDC_DeInit+0x100>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	f003 020f 	and.w	r2, r3, #15
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	3324      	adds	r3, #36	; 0x24
 800686c:	2200      	movs	r2, #0
 800686e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006870:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <USBD_CDC_DeInit+0x100>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f003 020f 	and.w	r2, r3, #15
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	3326      	adds	r3, #38	; 0x26
 8006886:	2200      	movs	r2, #0
 8006888:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	32b0      	adds	r2, #176	; 0xb0
 8006894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01f      	beq.n	80068dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	33b0      	adds	r3, #176	; 0xb0
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	32b0      	adds	r2, #176	; 0xb0
 80068ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068be:	4618      	mov	r0, r3
 80068c0:	f002 fb78 	bl	8008fb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	32b0      	adds	r2, #176	; 0xb0
 80068ce:	2100      	movs	r1, #0
 80068d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000093 	.word	0x20000093
 80068ec:	20000094 	.word	0x20000094
 80068f0:	20000095 	.word	0x20000095

080068f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	32b0      	adds	r2, #176	; 0xb0
 8006908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	e0bf      	b.n	8006aa4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800692c:	2b00      	cmp	r3, #0
 800692e:	d050      	beq.n	80069d2 <USBD_CDC_Setup+0xde>
 8006930:	2b20      	cmp	r3, #32
 8006932:	f040 80af 	bne.w	8006a94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	88db      	ldrh	r3, [r3, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d03a      	beq.n	80069b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b25b      	sxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	da1b      	bge.n	8006980 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	33b0      	adds	r3, #176	; 0xb0
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800695e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	88d2      	ldrh	r2, [r2, #6]
 8006964:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	88db      	ldrh	r3, [r3, #6]
 800696a:	2b07      	cmp	r3, #7
 800696c:	bf28      	it	cs
 800696e:	2307      	movcs	r3, #7
 8006970:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	89fa      	ldrh	r2, [r7, #14]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fd6d 	bl	8008458 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800697e:	e090      	b.n	8006aa2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	785a      	ldrb	r2, [r3, #1]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b3f      	cmp	r3, #63	; 0x3f
 8006990:	d803      	bhi.n	800699a <USBD_CDC_Setup+0xa6>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	88db      	ldrh	r3, [r3, #6]
 8006996:	b2da      	uxtb	r2, r3
 8006998:	e000      	b.n	800699c <USBD_CDC_Setup+0xa8>
 800699a:	2240      	movs	r2, #64	; 0x40
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069a2:	6939      	ldr	r1, [r7, #16]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80069aa:	461a      	mov	r2, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 fd7f 	bl	80084b0 <USBD_CtlPrepareRx>
      break;
 80069b2:	e076      	b.n	8006aa2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	33b0      	adds	r3, #176	; 0xb0
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	7850      	ldrb	r0, [r2, #1]
 80069ca:	2200      	movs	r2, #0
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	4798      	blx	r3
      break;
 80069d0:	e067      	b.n	8006aa2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b0b      	cmp	r3, #11
 80069d8:	d851      	bhi.n	8006a7e <USBD_CDC_Setup+0x18a>
 80069da:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <USBD_CDC_Setup+0xec>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a11 	.word	0x08006a11
 80069e4:	08006a8d 	.word	0x08006a8d
 80069e8:	08006a7f 	.word	0x08006a7f
 80069ec:	08006a7f 	.word	0x08006a7f
 80069f0:	08006a7f 	.word	0x08006a7f
 80069f4:	08006a7f 	.word	0x08006a7f
 80069f8:	08006a7f 	.word	0x08006a7f
 80069fc:	08006a7f 	.word	0x08006a7f
 8006a00:	08006a7f 	.word	0x08006a7f
 8006a04:	08006a7f 	.word	0x08006a7f
 8006a08:	08006a3b 	.word	0x08006a3b
 8006a0c:	08006a65 	.word	0x08006a65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d107      	bne.n	8006a2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a1c:	f107 030a 	add.w	r3, r7, #10
 8006a20:	2202      	movs	r2, #2
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fd17 	bl	8008458 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a2a:	e032      	b.n	8006a92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fca1 	bl	8008376 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a34:	2303      	movs	r3, #3
 8006a36:	75fb      	strb	r3, [r7, #23]
          break;
 8006a38:	e02b      	b.n	8006a92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d107      	bne.n	8006a56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a46:	f107 030d 	add.w	r3, r7, #13
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fd02 	bl	8008458 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a54:	e01d      	b.n	8006a92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 fc8c 	bl	8008376 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	75fb      	strb	r3, [r7, #23]
          break;
 8006a62:	e016      	b.n	8006a92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d00f      	beq.n	8006a90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fc7f 	bl	8008376 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a7c:	e008      	b.n	8006a90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fc78 	bl	8008376 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a86:	2303      	movs	r3, #3
 8006a88:	75fb      	strb	r3, [r7, #23]
          break;
 8006a8a:	e002      	b.n	8006a92 <USBD_CDC_Setup+0x19e>
          break;
 8006a8c:	bf00      	nop
 8006a8e:	e008      	b.n	8006aa2 <USBD_CDC_Setup+0x1ae>
          break;
 8006a90:	bf00      	nop
      }
      break;
 8006a92:	e006      	b.n	8006aa2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 fc6d 	bl	8008376 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006abe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	32b0      	adds	r2, #176	; 0xb0
 8006aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e065      	b.n	8006ba2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	32b0      	adds	r2, #176	; 0xb0
 8006ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	f003 020f 	and.w	r2, r3, #15
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	3318      	adds	r3, #24
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d02f      	beq.n	8006b60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	3318      	adds	r3, #24
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	f003 010f 	and.w	r1, r3, #15
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	440b      	add	r3, r1
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4403      	add	r3, r0
 8006b28:	3348      	adds	r3, #72	; 0x48
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d112      	bne.n	8006b60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	f003 020f 	and.w	r2, r3, #15
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	3318      	adds	r3, #24
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b52:	78f9      	ldrb	r1, [r7, #3]
 8006b54:	2300      	movs	r3, #0
 8006b56:	2200      	movs	r2, #0
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f002 f97a 	bl	8008e52 <USBD_LL_Transmit>
 8006b5e:	e01f      	b.n	8006ba0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	33b0      	adds	r3, #176	; 0xb0
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d010      	beq.n	8006ba0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	33b0      	adds	r3, #176	; 0xb0
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b9c:	78fa      	ldrb	r2, [r7, #3]
 8006b9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	32b0      	adds	r2, #176	; 0xb0
 8006bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	32b0      	adds	r2, #176	; 0xb0
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e01a      	b.n	8006c12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f002 f978 	bl	8008ed6 <USBD_LL_GetRxDataSize>
 8006be6:	4602      	mov	r2, r0
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	33b0      	adds	r3, #176	; 0xb0
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	32b0      	adds	r2, #176	; 0xb0
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e025      	b.n	8006c88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	33b0      	adds	r3, #176	; 0xb0
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01a      	beq.n	8006c86 <USBD_CDC_EP0_RxReady+0x6c>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c56:	2bff      	cmp	r3, #255	; 0xff
 8006c58:	d015      	beq.n	8006c86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	33b0      	adds	r3, #176	; 0xb0
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	22ff      	movs	r2, #255	; 0xff
 8006c82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c98:	2182      	movs	r1, #130	; 0x82
 8006c9a:	4818      	ldr	r0, [pc, #96]	; (8006cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c9c:	f000 fd09 	bl	80076b2 <USBD_GetEpDesc>
 8006ca0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	4815      	ldr	r0, [pc, #84]	; (8006cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ca6:	f000 fd04 	bl	80076b2 <USBD_GetEpDesc>
 8006caa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cac:	2181      	movs	r1, #129	; 0x81
 8006cae:	4813      	ldr	r0, [pc, #76]	; (8006cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cb0:	f000 fcff 	bl	80076b2 <USBD_GetEpDesc>
 8006cb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2210      	movs	r2, #16
 8006cc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d006      	beq.n	8006cd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd0:	711a      	strb	r2, [r3, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d006      	beq.n	8006cea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ce4:	711a      	strb	r2, [r3, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2243      	movs	r2, #67	; 0x43
 8006cee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cf0:	4b02      	ldr	r3, [pc, #8]	; (8006cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000050 	.word	0x20000050

08006d00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d08:	2182      	movs	r1, #130	; 0x82
 8006d0a:	4818      	ldr	r0, [pc, #96]	; (8006d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d0c:	f000 fcd1 	bl	80076b2 <USBD_GetEpDesc>
 8006d10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d12:	2101      	movs	r1, #1
 8006d14:	4815      	ldr	r0, [pc, #84]	; (8006d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d16:	f000 fccc 	bl	80076b2 <USBD_GetEpDesc>
 8006d1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d1c:	2181      	movs	r1, #129	; 0x81
 8006d1e:	4813      	ldr	r0, [pc, #76]	; (8006d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d20:	f000 fcc7 	bl	80076b2 <USBD_GetEpDesc>
 8006d24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d006      	beq.n	8006d46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	711a      	strb	r2, [r3, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f042 0202 	orr.w	r2, r2, #2
 8006d44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d006      	beq.n	8006d5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	711a      	strb	r2, [r3, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f042 0202 	orr.w	r2, r2, #2
 8006d58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2243      	movs	r2, #67	; 0x43
 8006d5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d60:	4b02      	ldr	r3, [pc, #8]	; (8006d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000050 	.word	0x20000050

08006d70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d78:	2182      	movs	r1, #130	; 0x82
 8006d7a:	4818      	ldr	r0, [pc, #96]	; (8006ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d7c:	f000 fc99 	bl	80076b2 <USBD_GetEpDesc>
 8006d80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d82:	2101      	movs	r1, #1
 8006d84:	4815      	ldr	r0, [pc, #84]	; (8006ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d86:	f000 fc94 	bl	80076b2 <USBD_GetEpDesc>
 8006d8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d8c:	2181      	movs	r1, #129	; 0x81
 8006d8e:	4813      	ldr	r0, [pc, #76]	; (8006ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d90:	f000 fc8f 	bl	80076b2 <USBD_GetEpDesc>
 8006d94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2210      	movs	r2, #16
 8006da0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d006      	beq.n	8006db6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006db0:	711a      	strb	r2, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d006      	beq.n	8006dca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dc4:	711a      	strb	r2, [r3, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2243      	movs	r2, #67	; 0x43
 8006dce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dd0:	4b02      	ldr	r3, [pc, #8]	; (8006ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000050 	.word	0x20000050

08006de0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	220a      	movs	r2, #10
 8006dec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006dee:	4b03      	ldr	r3, [pc, #12]	; (8006dfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	2000000c 	.word	0x2000000c

08006e00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e009      	b.n	8006e28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	33b0      	adds	r3, #176	; 0xb0
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	32b0      	adds	r2, #176	; 0xb0
 8006e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e008      	b.n	8006e6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	32b0      	adds	r2, #176	; 0xb0
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e004      	b.n	8006ea6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
	...

08006eb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	32b0      	adds	r2, #176	; 0xb0
 8006ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	32b0      	adds	r2, #176	; 0xb0
 8006ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e018      	b.n	8006f14 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7c1b      	ldrb	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <USBD_CDC_ReceivePacket+0x68>)
 8006eec:	7819      	ldrb	r1, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 ffcb 	bl	8008e94 <USBD_LL_PrepareReceive>
 8006efe:	e008      	b.n	8006f12 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f00:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <USBD_CDC_ReceivePacket+0x68>)
 8006f02:	7819      	ldrb	r1, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f0a:	2340      	movs	r3, #64	; 0x40
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 ffc1 	bl	8008e94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20000094 	.word	0x20000094

08006f20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e01f      	b.n	8006f78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	79fa      	ldrb	r2, [r7, #7]
 8006f6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f001 fe37 	bl	8008be0 <USBD_LL_Init>
 8006f72:	4603      	mov	r3, r0
 8006f74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e025      	b.n	8006fe4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	32ae      	adds	r2, #174	; 0xae
 8006faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00f      	beq.n	8006fd4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	32ae      	adds	r2, #174	; 0xae
 8006fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	f107 020e 	add.w	r2, r7, #14
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fe43 	bl	8008c80 <USBD_LL_Start>
 8006ffa:	4603      	mov	r3, r0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800700c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	460b      	mov	r3, r1
 8007024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	78fa      	ldrb	r2, [r7, #3]
 800703e:	4611      	mov	r1, r2
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	4611      	mov	r1, r2
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f001 f932 	bl	8008302 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070ac:	461a      	mov	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d01a      	beq.n	80070f8 <USBD_LL_SetupStage+0x72>
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d822      	bhi.n	800710c <USBD_LL_SetupStage+0x86>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <USBD_LL_SetupStage+0x4a>
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d00a      	beq.n	80070e4 <USBD_LL_SetupStage+0x5e>
 80070ce:	e01d      	b.n	800710c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fb5f 	bl	800779c <USBD_StdDevReq>
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]
      break;
 80070e2:	e020      	b.n	8007126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fbc7 	bl	8007880 <USBD_StdItfReq>
 80070f2:	4603      	mov	r3, r0
 80070f4:	73fb      	strb	r3, [r7, #15]
      break;
 80070f6:	e016      	b.n	8007126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fc29 	bl	8007958 <USBD_StdEPReq>
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]
      break;
 800710a:	e00c      	b.n	8007126 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007116:	b2db      	uxtb	r3, r3
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fe10 	bl	8008d40 <USBD_LL_StallEP>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
      break;
 8007124:	bf00      	nop
  }

  return ret;
 8007126:	7bfb      	ldrb	r3, [r7, #15]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	460b      	mov	r3, r1
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d16e      	bne.n	8007226 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800714e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007156:	2b03      	cmp	r3, #3
 8007158:	f040 8098 	bne.w	800728c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	429a      	cmp	r2, r3
 8007166:	d913      	bls.n	8007190 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	1ad2      	subs	r2, r2, r3
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	4293      	cmp	r3, r2
 8007180:	bf28      	it	cs
 8007182:	4613      	movcs	r3, r2
 8007184:	461a      	mov	r2, r3
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f001 f9ae 	bl	80084ea <USBD_CtlContinueRx>
 800718e:	e07d      	b.n	800728c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2b02      	cmp	r3, #2
 800719c:	d014      	beq.n	80071c8 <USBD_LL_DataOutStage+0x98>
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d81d      	bhi.n	80071de <USBD_LL_DataOutStage+0xae>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <USBD_LL_DataOutStage+0x7c>
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d003      	beq.n	80071b2 <USBD_LL_DataOutStage+0x82>
 80071aa:	e018      	b.n	80071de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	75bb      	strb	r3, [r7, #22]
            break;
 80071b0:	e018      	b.n	80071e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	4619      	mov	r1, r3
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fa5e 	bl	800767e <USBD_CoreFindIF>
 80071c2:	4603      	mov	r3, r0
 80071c4:	75bb      	strb	r3, [r7, #22]
            break;
 80071c6:	e00d      	b.n	80071e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	4619      	mov	r1, r3
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 fa60 	bl	8007698 <USBD_CoreFindEP>
 80071d8:	4603      	mov	r3, r0
 80071da:	75bb      	strb	r3, [r7, #22]
            break;
 80071dc:	e002      	b.n	80071e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	75bb      	strb	r3, [r7, #22]
            break;
 80071e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071e4:	7dbb      	ldrb	r3, [r7, #22]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d119      	bne.n	800721e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d113      	bne.n	800721e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071f6:	7dba      	ldrb	r2, [r7, #22]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	32ae      	adds	r2, #174	; 0xae
 80071fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007206:	7dba      	ldrb	r2, [r7, #22]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800720e:	7dba      	ldrb	r2, [r7, #22]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	32ae      	adds	r2, #174	; 0xae
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f001 f974 	bl	800850c <USBD_CtlSendStatus>
 8007224:	e032      	b.n	800728c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007226:	7afb      	ldrb	r3, [r7, #11]
 8007228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722c:	b2db      	uxtb	r3, r3
 800722e:	4619      	mov	r1, r3
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fa31 	bl	8007698 <USBD_CoreFindEP>
 8007236:	4603      	mov	r3, r0
 8007238:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800723a:	7dbb      	ldrb	r3, [r7, #22]
 800723c:	2bff      	cmp	r3, #255	; 0xff
 800723e:	d025      	beq.n	800728c <USBD_LL_DataOutStage+0x15c>
 8007240:	7dbb      	ldrb	r3, [r7, #22]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d122      	bne.n	800728c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b03      	cmp	r3, #3
 8007250:	d117      	bne.n	8007282 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007252:	7dba      	ldrb	r2, [r7, #22]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	32ae      	adds	r2, #174	; 0xae
 8007258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00f      	beq.n	8007282 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007262:	7dba      	ldrb	r2, [r7, #22]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800726a:	7dba      	ldrb	r2, [r7, #22]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	32ae      	adds	r2, #174	; 0xae
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	7afa      	ldrb	r2, [r7, #11]
 8007278:	4611      	mov	r1, r2
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	4798      	blx	r3
 800727e:	4603      	mov	r3, r0
 8007280:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	e000      	b.n	800728e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	460b      	mov	r3, r1
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d16f      	bne.n	800738a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3314      	adds	r3, #20
 80072ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d15a      	bne.n	8007370 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d914      	bls.n	80072f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	461a      	mov	r2, r3
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f001 f8d6 	bl	800848e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072e2:	2300      	movs	r3, #0
 80072e4:	2200      	movs	r2, #0
 80072e6:	2100      	movs	r1, #0
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f001 fdd3 	bl	8008e94 <USBD_LL_PrepareReceive>
 80072ee:	e03f      	b.n	8007370 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d11c      	bne.n	8007336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007304:	429a      	cmp	r2, r3
 8007306:	d316      	bcc.n	8007336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007312:	429a      	cmp	r2, r3
 8007314:	d20f      	bcs.n	8007336 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007316:	2200      	movs	r2, #0
 8007318:	2100      	movs	r1, #0
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f001 f8b7 	bl	800848e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007328:	2300      	movs	r3, #0
 800732a:	2200      	movs	r2, #0
 800732c:	2100      	movs	r1, #0
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f001 fdb0 	bl	8008e94 <USBD_LL_PrepareReceive>
 8007334:	e01c      	b.n	8007370 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b03      	cmp	r3, #3
 8007340:	d10f      	bne.n	8007362 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d009      	beq.n	8007362 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007362:	2180      	movs	r1, #128	; 0x80
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f001 fceb 	bl	8008d40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f001 f8e1 	bl	8008532 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d03a      	beq.n	80073f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff fe42 	bl	8007004 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007388:	e032      	b.n	80073f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007390:	b2db      	uxtb	r3, r3
 8007392:	4619      	mov	r1, r3
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f97f 	bl	8007698 <USBD_CoreFindEP>
 800739a:	4603      	mov	r3, r0
 800739c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	2bff      	cmp	r3, #255	; 0xff
 80073a2:	d025      	beq.n	80073f0 <USBD_LL_DataInStage+0x15a>
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d122      	bne.n	80073f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d11c      	bne.n	80073f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073b6:	7dfa      	ldrb	r2, [r7, #23]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	32ae      	adds	r2, #174	; 0xae
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d014      	beq.n	80073f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073c6:	7dfa      	ldrb	r2, [r7, #23]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073ce:	7dfa      	ldrb	r2, [r7, #23]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	32ae      	adds	r2, #174	; 0xae
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	7afa      	ldrb	r2, [r7, #11]
 80073dc:	4611      	mov	r1, r2
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	4798      	blx	r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073e6:	7dbb      	ldrb	r3, [r7, #22]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073ec:	7dbb      	ldrb	r3, [r7, #22]
 80073ee:	e000      	b.n	80073f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d014      	beq.n	8007460 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00e      	beq.n	8007460 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	6852      	ldr	r2, [r2, #4]
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	4611      	mov	r1, r2
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800745c:	2303      	movs	r3, #3
 800745e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007460:	2340      	movs	r3, #64	; 0x40
 8007462:	2200      	movs	r2, #0
 8007464:	2100      	movs	r1, #0
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fc25 	bl	8008cb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2240      	movs	r2, #64	; 0x40
 8007478:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	2200      	movs	r2, #0
 8007480:	2180      	movs	r1, #128	; 0x80
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 fc17 	bl	8008cb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2240      	movs	r2, #64	; 0x40
 8007492:	621a      	str	r2, [r3, #32]

  return ret;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	78fa      	ldrb	r2, [r7, #3]
 80074ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2204      	movs	r2, #4
 80074d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d106      	bne.n	800750c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007504:	b2da      	uxtb	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b03      	cmp	r3, #3
 800752c:	d110      	bne.n	8007550 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00b      	beq.n	8007550 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b082      	sub	sp, #8
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	460b      	mov	r3, r1
 8007564:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	32ae      	adds	r2, #174	; 0xae
 8007570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007578:	2303      	movs	r3, #3
 800757a:	e01c      	b.n	80075b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b03      	cmp	r3, #3
 8007586:	d115      	bne.n	80075b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	32ae      	adds	r2, #174	; 0xae
 8007592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	32ae      	adds	r2, #174	; 0xae
 80075a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	4611      	mov	r1, r2
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	32ae      	adds	r2, #174	; 0xae
 80075d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075dc:	2303      	movs	r3, #3
 80075de:	e01c      	b.n	800761a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d115      	bne.n	8007618 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	32ae      	adds	r2, #174	; 0xae
 80075f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	32ae      	adds	r2, #174	; 0xae
 800760a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	4611      	mov	r1, r2
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00e      	beq.n	8007674 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6852      	ldr	r2, [r2, #4]
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	4611      	mov	r1, r2
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007670:	2303      	movs	r3, #3
 8007672:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800768a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	885b      	ldrh	r3, [r3, #2]
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d920      	bls.n	800771c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076e2:	e013      	b.n	800770c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076e4:	f107 030a 	add.w	r3, r7, #10
 80076e8:	4619      	mov	r1, r3
 80076ea:	6978      	ldr	r0, [r7, #20]
 80076ec:	f000 f81b 	bl	8007726 <USBD_GetNextDesc>
 80076f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	785b      	ldrb	r3, [r3, #1]
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d108      	bne.n	800770c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	789b      	ldrb	r3, [r3, #2]
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	429a      	cmp	r2, r3
 8007706:	d008      	beq.n	800771a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007708:	2300      	movs	r3, #0
 800770a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	b29a      	uxth	r2, r3
 8007712:	897b      	ldrh	r3, [r7, #10]
 8007714:	429a      	cmp	r2, r3
 8007716:	d8e5      	bhi.n	80076e4 <USBD_GetEpDesc+0x32>
 8007718:	e000      	b.n	800771c <USBD_GetEpDesc+0x6a>
          break;
 800771a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800771c:	693b      	ldr	r3, [r7, #16]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	881a      	ldrh	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	4413      	add	r3, r2
 8007740:	b29a      	uxth	r2, r3
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4413      	add	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007752:	68fb      	ldr	r3, [r7, #12]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	3301      	adds	r3, #1
 8007776:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800777e:	8a3b      	ldrh	r3, [r7, #16]
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	b21a      	sxth	r2, r3
 8007784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007788:	4313      	orrs	r3, r2
 800778a:	b21b      	sxth	r3, r3
 800778c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800778e:	89fb      	ldrh	r3, [r7, #14]
}
 8007790:	4618      	mov	r0, r3
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b2:	2b40      	cmp	r3, #64	; 0x40
 80077b4:	d005      	beq.n	80077c2 <USBD_StdDevReq+0x26>
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d857      	bhi.n	800786a <USBD_StdDevReq+0xce>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00f      	beq.n	80077de <USBD_StdDevReq+0x42>
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d153      	bne.n	800786a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	32ae      	adds	r2, #174	; 0xae
 80077cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e04a      	b.n	8007874 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b09      	cmp	r3, #9
 80077e4:	d83b      	bhi.n	800785e <USBD_StdDevReq+0xc2>
 80077e6:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <USBD_StdDevReq+0x50>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007841 	.word	0x08007841
 80077f0:	08007855 	.word	0x08007855
 80077f4:	0800785f 	.word	0x0800785f
 80077f8:	0800784b 	.word	0x0800784b
 80077fc:	0800785f 	.word	0x0800785f
 8007800:	0800781f 	.word	0x0800781f
 8007804:	08007815 	.word	0x08007815
 8007808:	0800785f 	.word	0x0800785f
 800780c:	08007837 	.word	0x08007837
 8007810:	08007829 	.word	0x08007829
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa3c 	bl	8007c94 <USBD_GetDescriptor>
          break;
 800781c:	e024      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fbcb 	bl	8007fbc <USBD_SetAddress>
          break;
 8007826:	e01f      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fc0a 	bl	8008044 <USBD_SetConfig>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]
          break;
 8007834:	e018      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fcad 	bl	8008198 <USBD_GetConfig>
          break;
 800783e:	e013      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fcde 	bl	8008204 <USBD_GetStatus>
          break;
 8007848:	e00e      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fd0d 	bl	800826c <USBD_SetFeature>
          break;
 8007852:	e009      	b.n	8007868 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fd31 	bl	80082be <USBD_ClrFeature>
          break;
 800785c:	e004      	b.n	8007868 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fd88 	bl	8008376 <USBD_CtlError>
          break;
 8007866:	bf00      	nop
      }
      break;
 8007868:	e004      	b.n	8007874 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fd82 	bl	8008376 <USBD_CtlError>
      break;
 8007872:	bf00      	nop
  }

  return ret;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop

08007880 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d005      	beq.n	80078a6 <USBD_StdItfReq+0x26>
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d852      	bhi.n	8007944 <USBD_StdItfReq+0xc4>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <USBD_StdItfReq+0x26>
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d14e      	bne.n	8007944 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d840      	bhi.n	8007936 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	889b      	ldrh	r3, [r3, #4]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d836      	bhi.n	800792c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	889b      	ldrh	r3, [r3, #4]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff fed9 	bl	800767e <USBD_CoreFindIF>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2bff      	cmp	r3, #255	; 0xff
 80078d4:	d01d      	beq.n	8007912 <USBD_StdItfReq+0x92>
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d11a      	bne.n	8007912 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078dc:	7bba      	ldrb	r2, [r7, #14]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	32ae      	adds	r2, #174	; 0xae
 80078e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00f      	beq.n	800790c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078ec:	7bba      	ldrb	r2, [r7, #14]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078f4:	7bba      	ldrb	r2, [r7, #14]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	32ae      	adds	r2, #174	; 0xae
 80078fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800790a:	e004      	b.n	8007916 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800790c:	2303      	movs	r3, #3
 800790e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007910:	e001      	b.n	8007916 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007912:	2303      	movs	r3, #3
 8007914:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	88db      	ldrh	r3, [r3, #6]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d110      	bne.n	8007940 <USBD_StdItfReq+0xc0>
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10d      	bne.n	8007940 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fdf1 	bl	800850c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800792a:	e009      	b.n	8007940 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fd21 	bl	8008376 <USBD_CtlError>
          break;
 8007934:	e004      	b.n	8007940 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fd1c 	bl	8008376 <USBD_CtlError>
          break;
 800793e:	e000      	b.n	8007942 <USBD_StdItfReq+0xc2>
          break;
 8007940:	bf00      	nop
      }
      break;
 8007942:	e004      	b.n	800794e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fd15 	bl	8008376 <USBD_CtlError>
      break;
 800794c:	bf00      	nop
  }

  return ret;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	889b      	ldrh	r3, [r3, #4]
 800796a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	d007      	beq.n	8007988 <USBD_StdEPReq+0x30>
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	f200 817f 	bhi.w	8007c7c <USBD_StdEPReq+0x324>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d02a      	beq.n	80079d8 <USBD_StdEPReq+0x80>
 8007982:	2b20      	cmp	r3, #32
 8007984:	f040 817a 	bne.w	8007c7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fe83 	bl	8007698 <USBD_CoreFindEP>
 8007992:	4603      	mov	r3, r0
 8007994:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007996:	7b7b      	ldrb	r3, [r7, #13]
 8007998:	2bff      	cmp	r3, #255	; 0xff
 800799a:	f000 8174 	beq.w	8007c86 <USBD_StdEPReq+0x32e>
 800799e:	7b7b      	ldrb	r3, [r7, #13]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 8170 	bne.w	8007c86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079a6:	7b7a      	ldrb	r2, [r7, #13]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079ae:	7b7a      	ldrb	r2, [r7, #13]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	32ae      	adds	r2, #174	; 0xae
 80079b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8163 	beq.w	8007c86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079c0:	7b7a      	ldrb	r2, [r7, #13]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	32ae      	adds	r2, #174	; 0xae
 80079c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079d6:	e156      	b.n	8007c86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d008      	beq.n	80079f2 <USBD_StdEPReq+0x9a>
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	f300 8145 	bgt.w	8007c70 <USBD_StdEPReq+0x318>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 809b 	beq.w	8007b22 <USBD_StdEPReq+0x1ca>
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d03c      	beq.n	8007a6a <USBD_StdEPReq+0x112>
 80079f0:	e13e      	b.n	8007c70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d002      	beq.n	8007a04 <USBD_StdEPReq+0xac>
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d016      	beq.n	8007a30 <USBD_StdEPReq+0xd8>
 8007a02:	e02c      	b.n	8007a5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00d      	beq.n	8007a26 <USBD_StdEPReq+0xce>
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	2b80      	cmp	r3, #128	; 0x80
 8007a0e:	d00a      	beq.n	8007a26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 f993 	bl	8008d40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a1a:	2180      	movs	r1, #128	; 0x80
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 f98f 	bl	8008d40 <USBD_LL_StallEP>
 8007a22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a24:	e020      	b.n	8007a68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fca4 	bl	8008376 <USBD_CtlError>
              break;
 8007a2e:	e01b      	b.n	8007a68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	885b      	ldrh	r3, [r3, #2]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10e      	bne.n	8007a56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <USBD_StdEPReq+0xfe>
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	2b80      	cmp	r3, #128	; 0x80
 8007a42:	d008      	beq.n	8007a56 <USBD_StdEPReq+0xfe>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	88db      	ldrh	r3, [r3, #6]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d104      	bne.n	8007a56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 f975 	bl	8008d40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fd58 	bl	800850c <USBD_CtlSendStatus>

              break;
 8007a5c:	e004      	b.n	8007a68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fc88 	bl	8008376 <USBD_CtlError>
              break;
 8007a66:	bf00      	nop
          }
          break;
 8007a68:	e107      	b.n	8007c7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d002      	beq.n	8007a7c <USBD_StdEPReq+0x124>
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d016      	beq.n	8007aa8 <USBD_StdEPReq+0x150>
 8007a7a:	e04b      	b.n	8007b14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00d      	beq.n	8007a9e <USBD_StdEPReq+0x146>
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b80      	cmp	r3, #128	; 0x80
 8007a86:	d00a      	beq.n	8007a9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 f957 	bl	8008d40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a92:	2180      	movs	r1, #128	; 0x80
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 f953 	bl	8008d40 <USBD_LL_StallEP>
 8007a9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a9c:	e040      	b.n	8007b20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fc68 	bl	8008376 <USBD_CtlError>
              break;
 8007aa6:	e03b      	b.n	8007b20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	885b      	ldrh	r3, [r3, #2]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d136      	bne.n	8007b1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 f95d 	bl	8008d7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fd21 	bl	800850c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fde2 	bl	8007698 <USBD_CoreFindEP>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ad8:	7b7b      	ldrb	r3, [r7, #13]
 8007ada:	2bff      	cmp	r3, #255	; 0xff
 8007adc:	d01f      	beq.n	8007b1e <USBD_StdEPReq+0x1c6>
 8007ade:	7b7b      	ldrb	r3, [r7, #13]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d11c      	bne.n	8007b1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ae4:	7b7a      	ldrb	r2, [r7, #13]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007aec:	7b7a      	ldrb	r2, [r7, #13]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32ae      	adds	r2, #174	; 0xae
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d010      	beq.n	8007b1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007afc:	7b7a      	ldrb	r2, [r7, #13]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32ae      	adds	r2, #174	; 0xae
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4798      	blx	r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b12:	e004      	b.n	8007b1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fc2d 	bl	8008376 <USBD_CtlError>
              break;
 8007b1c:	e000      	b.n	8007b20 <USBD_StdEPReq+0x1c8>
              break;
 8007b1e:	bf00      	nop
          }
          break;
 8007b20:	e0ab      	b.n	8007c7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d002      	beq.n	8007b34 <USBD_StdEPReq+0x1dc>
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d032      	beq.n	8007b98 <USBD_StdEPReq+0x240>
 8007b32:	e097      	b.n	8007c64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <USBD_StdEPReq+0x1f2>
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	2b80      	cmp	r3, #128	; 0x80
 8007b3e:	d004      	beq.n	8007b4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fc17 	bl	8008376 <USBD_CtlError>
                break;
 8007b48:	e091      	b.n	8007c6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	da0b      	bge.n	8007b6a <USBD_StdEPReq+0x212>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	3310      	adds	r3, #16
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	3304      	adds	r3, #4
 8007b68:	e00b      	b.n	8007b82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	4413      	add	r3, r2
 8007b80:	3304      	adds	r3, #4
 8007b82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fc61 	bl	8008458 <USBD_CtlSendData>
              break;
 8007b96:	e06a      	b.n	8007c6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da11      	bge.n	8007bc4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	f003 020f 	and.w	r2, r3, #15
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	3324      	adds	r3, #36	; 0x24
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d117      	bne.n	8007bea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fbda 	bl	8008376 <USBD_CtlError>
                  break;
 8007bc2:	e054      	b.n	8007c6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	f003 020f 	and.w	r2, r3, #15
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d104      	bne.n	8007bea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fbc7 	bl	8008376 <USBD_CtlError>
                  break;
 8007be8:	e041      	b.n	8007c6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da0b      	bge.n	8007c0a <USBD_StdEPReq+0x2b2>
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	3310      	adds	r3, #16
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4413      	add	r3, r2
 8007c06:	3304      	adds	r3, #4
 8007c08:	e00b      	b.n	8007c22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	4413      	add	r3, r2
 8007c20:	3304      	adds	r3, #4
 8007c22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <USBD_StdEPReq+0x2d8>
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	2b80      	cmp	r3, #128	; 0x80
 8007c2e:	d103      	bne.n	8007c38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	e00e      	b.n	8007c56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 f8bd 	bl	8008dbc <USBD_LL_IsStallEP>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e002      	b.n	8007c56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fbfb 	bl	8008458 <USBD_CtlSendData>
              break;
 8007c62:	e004      	b.n	8007c6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb85 	bl	8008376 <USBD_CtlError>
              break;
 8007c6c:	bf00      	nop
          }
          break;
 8007c6e:	e004      	b.n	8007c7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fb7f 	bl	8008376 <USBD_CtlError>
          break;
 8007c78:	bf00      	nop
      }
      break;
 8007c7a:	e005      	b.n	8007c88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fb79 	bl	8008376 <USBD_CtlError>
      break;
 8007c84:	e000      	b.n	8007c88 <USBD_StdEPReq+0x330>
      break;
 8007c86:	bf00      	nop
  }

  return ret;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	0a1b      	lsrs	r3, r3, #8
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	2b0e      	cmp	r3, #14
 8007cb6:	f200 8152 	bhi.w	8007f5e <USBD_GetDescriptor+0x2ca>
 8007cba:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <USBD_GetDescriptor+0x2c>)
 8007cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc0:	08007d31 	.word	0x08007d31
 8007cc4:	08007d49 	.word	0x08007d49
 8007cc8:	08007d89 	.word	0x08007d89
 8007ccc:	08007f5f 	.word	0x08007f5f
 8007cd0:	08007f5f 	.word	0x08007f5f
 8007cd4:	08007eff 	.word	0x08007eff
 8007cd8:	08007f2b 	.word	0x08007f2b
 8007cdc:	08007f5f 	.word	0x08007f5f
 8007ce0:	08007f5f 	.word	0x08007f5f
 8007ce4:	08007f5f 	.word	0x08007f5f
 8007ce8:	08007f5f 	.word	0x08007f5f
 8007cec:	08007f5f 	.word	0x08007f5f
 8007cf0:	08007f5f 	.word	0x08007f5f
 8007cf4:	08007f5f 	.word	0x08007f5f
 8007cf8:	08007cfd 	.word	0x08007cfd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d1e:	e126      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fb27 	bl	8008376 <USBD_CtlError>
        err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d2e:	e11e      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	7c12      	ldrb	r2, [r2, #16]
 8007d3c:	f107 0108 	add.w	r1, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
      break;
 8007d46:	e112      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	7c1b      	ldrb	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10d      	bne.n	8007d6c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d58:	f107 0208 	add.w	r2, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	2202      	movs	r2, #2
 8007d68:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d6a:	e100      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	f107 0208 	add.w	r2, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	2202      	movs	r2, #2
 8007d84:	701a      	strb	r2, [r3, #0]
      break;
 8007d86:	e0f2      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	885b      	ldrh	r3, [r3, #2]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	f200 80ac 	bhi.w	8007eec <USBD_GetDescriptor+0x258>
 8007d94:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <USBD_GetDescriptor+0x108>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007db5 	.word	0x08007db5
 8007da0:	08007de9 	.word	0x08007de9
 8007da4:	08007e1d 	.word	0x08007e1d
 8007da8:	08007e51 	.word	0x08007e51
 8007dac:	08007e85 	.word	0x08007e85
 8007db0:	08007eb9 	.word	0x08007eb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	7c12      	ldrb	r2, [r2, #16]
 8007dcc:	f107 0108 	add.w	r1, r7, #8
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	4798      	blx	r3
 8007dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd6:	e091      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 facb 	bl	8008376 <USBD_CtlError>
            err++;
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	3301      	adds	r3, #1
 8007de4:	72fb      	strb	r3, [r7, #11]
          break;
 8007de6:	e089      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	7c12      	ldrb	r2, [r2, #16]
 8007e00:	f107 0108 	add.w	r1, r7, #8
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0a:	e077      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fab1 	bl	8008376 <USBD_CtlError>
            err++;
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	3301      	adds	r3, #1
 8007e18:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1a:	e06f      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	7c12      	ldrb	r2, [r2, #16]
 8007e34:	f107 0108 	add.w	r1, r7, #8
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3e:	e05d      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa97 	bl	8008376 <USBD_CtlError>
            err++;
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4e:	e055      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	7c12      	ldrb	r2, [r2, #16]
 8007e68:	f107 0108 	add.w	r1, r7, #8
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
 8007e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e72:	e043      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa7d 	bl	8008376 <USBD_CtlError>
            err++;
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	72fb      	strb	r3, [r7, #11]
          break;
 8007e82:	e03b      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	7c12      	ldrb	r2, [r2, #16]
 8007e9c:	f107 0108 	add.w	r1, r7, #8
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4798      	blx	r3
 8007ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea6:	e029      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa63 	bl	8008376 <USBD_CtlError>
            err++;
 8007eb0:	7afb      	ldrb	r3, [r7, #11]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb6:	e021      	b.n	8007efc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00b      	beq.n	8007edc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	7c12      	ldrb	r2, [r2, #16]
 8007ed0:	f107 0108 	add.w	r1, r7, #8
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4798      	blx	r3
 8007ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eda:	e00f      	b.n	8007efc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa49 	bl	8008376 <USBD_CtlError>
            err++;
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eea:	e007      	b.n	8007efc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa41 	bl	8008376 <USBD_CtlError>
          err++;
 8007ef4:	7afb      	ldrb	r3, [r7, #11]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007efa:	bf00      	nop
      }
      break;
 8007efc:	e037      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	7c1b      	ldrb	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0e:	f107 0208 	add.w	r2, r7, #8
 8007f12:	4610      	mov	r0, r2
 8007f14:	4798      	blx	r3
 8007f16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f18:	e029      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fa2a 	bl	8008376 <USBD_CtlError>
        err++;
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	3301      	adds	r3, #1
 8007f26:	72fb      	strb	r3, [r7, #11]
      break;
 8007f28:	e021      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7c1b      	ldrb	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10d      	bne.n	8007f4e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	f107 0208 	add.w	r2, r7, #8
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4798      	blx	r3
 8007f42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3301      	adds	r3, #1
 8007f48:	2207      	movs	r2, #7
 8007f4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f4c:	e00f      	b.n	8007f6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fa10 	bl	8008376 <USBD_CtlError>
        err++;
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f5c:	e007      	b.n	8007f6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa08 	bl	8008376 <USBD_CtlError>
      err++;
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f6c:	bf00      	nop
  }

  if (err != 0U)
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d11e      	bne.n	8007fb2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	88db      	ldrh	r3, [r3, #6]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d016      	beq.n	8007faa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007f7c:	893b      	ldrh	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00e      	beq.n	8007fa0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	88da      	ldrh	r2, [r3, #6]
 8007f86:	893b      	ldrh	r3, [r7, #8]
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	bf28      	it	cs
 8007f8c:	4613      	movcs	r3, r2
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f92:	893b      	ldrh	r3, [r7, #8]
 8007f94:	461a      	mov	r2, r3
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa5d 	bl	8008458 <USBD_CtlSendData>
 8007f9e:	e009      	b.n	8007fb4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9e7 	bl	8008376 <USBD_CtlError>
 8007fa8:	e004      	b.n	8007fb4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 faae 	bl	800850c <USBD_CtlSendStatus>
 8007fb0:	e000      	b.n	8007fb4 <USBD_GetDescriptor+0x320>
    return;
 8007fb2:	bf00      	nop
  }
}
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop

08007fbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	889b      	ldrh	r3, [r3, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d131      	bne.n	8008032 <USBD_SetAddress+0x76>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	88db      	ldrh	r3, [r3, #6]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d12d      	bne.n	8008032 <USBD_SetAddress+0x76>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	2b7f      	cmp	r3, #127	; 0x7f
 8007fdc:	d829      	bhi.n	8008032 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	885b      	ldrh	r3, [r3, #2]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d104      	bne.n	8008000 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9bc 	bl	8008376 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffe:	e01d      	b.n	800803c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7bfa      	ldrb	r2, [r7, #15]
 8008004:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 ff01 	bl	8008e14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa7a 	bl	800850c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008026:	e009      	b.n	800803c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008030:	e004      	b.n	800803c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f99e 	bl	8008376 <USBD_CtlError>
  }
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	4b4e      	ldr	r3, [pc, #312]	; (8008194 <USBD_SetConfig+0x150>)
 800805a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800805c:	4b4d      	ldr	r3, [pc, #308]	; (8008194 <USBD_SetConfig+0x150>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d905      	bls.n	8008070 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f985 	bl	8008376 <USBD_CtlError>
    return USBD_FAIL;
 800806c:	2303      	movs	r3, #3
 800806e:	e08c      	b.n	800818a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d002      	beq.n	8008082 <USBD_SetConfig+0x3e>
 800807c:	2b03      	cmp	r3, #3
 800807e:	d029      	beq.n	80080d4 <USBD_SetConfig+0x90>
 8008080:	e075      	b.n	800816e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008082:	4b44      	ldr	r3, [pc, #272]	; (8008194 <USBD_SetConfig+0x150>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d020      	beq.n	80080cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800808a:	4b42      	ldr	r3, [pc, #264]	; (8008194 <USBD_SetConfig+0x150>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008094:	4b3f      	ldr	r3, [pc, #252]	; (8008194 <USBD_SetConfig+0x150>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fe ffbd 	bl	800701a <USBD_SetClassConfig>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f962 	bl	8008376 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080ba:	e065      	b.n	8008188 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa25 	bl	800850c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2203      	movs	r2, #3
 80080c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080ca:	e05d      	b.n	8008188 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa1d 	bl	800850c <USBD_CtlSendStatus>
      break;
 80080d2:	e059      	b.n	8008188 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080d4:	4b2f      	ldr	r3, [pc, #188]	; (8008194 <USBD_SetConfig+0x150>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d112      	bne.n	8008102 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080e4:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <USBD_SetConfig+0x150>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080ee:	4b29      	ldr	r3, [pc, #164]	; (8008194 <USBD_SetConfig+0x150>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7fe ffac 	bl	8007052 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fa06 	bl	800850c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008100:	e042      	b.n	8008188 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008102:	4b24      	ldr	r3, [pc, #144]	; (8008194 <USBD_SetConfig+0x150>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d02a      	beq.n	8008166 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7fe ff9a 	bl	8007052 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800811e:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <USBD_SetConfig+0x150>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008128:	4b1a      	ldr	r3, [pc, #104]	; (8008194 <USBD_SetConfig+0x150>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fe ff73 	bl	800701a <USBD_SetClassConfig>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00f      	beq.n	800815e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f918 	bl	8008376 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fe ff7f 	bl	8007052 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800815c:	e014      	b.n	8008188 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9d4 	bl	800850c <USBD_CtlSendStatus>
      break;
 8008164:	e010      	b.n	8008188 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9d0 	bl	800850c <USBD_CtlSendStatus>
      break;
 800816c:	e00c      	b.n	8008188 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f900 	bl	8008376 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008176:	4b07      	ldr	r3, [pc, #28]	; (8008194 <USBD_SetConfig+0x150>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7fe ff68 	bl	8007052 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008182:	2303      	movs	r3, #3
 8008184:	73fb      	strb	r3, [r7, #15]
      break;
 8008186:	bf00      	nop
  }

  return ret;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20000204 	.word	0x20000204

08008198 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	88db      	ldrh	r3, [r3, #6]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d004      	beq.n	80081b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f8e2 	bl	8008376 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081b2:	e023      	b.n	80081fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	dc02      	bgt.n	80081c6 <USBD_GetConfig+0x2e>
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc03      	bgt.n	80081cc <USBD_GetConfig+0x34>
 80081c4:	e015      	b.n	80081f2 <USBD_GetConfig+0x5a>
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d00b      	beq.n	80081e2 <USBD_GetConfig+0x4a>
 80081ca:	e012      	b.n	80081f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3308      	adds	r3, #8
 80081d6:	2201      	movs	r2, #1
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f93c 	bl	8008458 <USBD_CtlSendData>
        break;
 80081e0:	e00c      	b.n	80081fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3304      	adds	r3, #4
 80081e6:	2201      	movs	r2, #1
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f934 	bl	8008458 <USBD_CtlSendData>
        break;
 80081f0:	e004      	b.n	80081fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f8be 	bl	8008376 <USBD_CtlError>
        break;
 80081fa:	bf00      	nop
}
 80081fc:	bf00      	nop
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008214:	b2db      	uxtb	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	2b02      	cmp	r3, #2
 800821a:	d81e      	bhi.n	800825a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	88db      	ldrh	r3, [r3, #6]
 8008220:	2b02      	cmp	r3, #2
 8008222:	d004      	beq.n	800822e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f8a5 	bl	8008376 <USBD_CtlError>
        break;
 800822c:	e01a      	b.n	8008264 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f043 0202 	orr.w	r2, r3, #2
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	330c      	adds	r3, #12
 800824e:	2202      	movs	r2, #2
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f900 	bl	8008458 <USBD_CtlSendData>
      break;
 8008258:	e004      	b.n	8008264 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f88a 	bl	8008376 <USBD_CtlError>
      break;
 8008262:	bf00      	nop
  }
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	885b      	ldrh	r3, [r3, #2]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f940 	bl	800850c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800828c:	e013      	b.n	80082b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	885b      	ldrh	r3, [r3, #2]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d10b      	bne.n	80082ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	889b      	ldrh	r3, [r3, #4]
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	b29b      	uxth	r3, r3
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f930 	bl	800850c <USBD_CtlSendStatus>
}
 80082ac:	e003      	b.n	80082b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f860 	bl	8008376 <USBD_CtlError>
}
 80082b6:	bf00      	nop
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	3b01      	subs	r3, #1
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d80b      	bhi.n	80082ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	885b      	ldrh	r3, [r3, #2]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d10c      	bne.n	80082f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f910 	bl	800850c <USBD_CtlSendStatus>
      }
      break;
 80082ec:	e004      	b.n	80082f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f840 	bl	8008376 <USBD_CtlError>
      break;
 80082f6:	e000      	b.n	80082fa <USBD_ClrFeature+0x3c>
      break;
 80082f8:	bf00      	nop
  }
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	781a      	ldrb	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	3301      	adds	r3, #1
 800831c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7ff fa17 	bl	8007760 <SWAPBYTE>
 8008332:	4603      	mov	r3, r0
 8008334:	461a      	mov	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3301      	adds	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff fa0a 	bl	8007760 <SWAPBYTE>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3301      	adds	r3, #1
 800835e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7ff f9fd 	bl	8007760 <SWAPBYTE>
 8008366:	4603      	mov	r3, r0
 8008368:	461a      	mov	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	80da      	strh	r2, [r3, #6]
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008380:	2180      	movs	r1, #128	; 0x80
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fcdc 	bl	8008d40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008388:	2100      	movs	r1, #0
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fcd8 	bl	8008d40 <USBD_LL_StallEP>
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d036      	beq.n	800841c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083b2:	6938      	ldr	r0, [r7, #16]
 80083b4:	f000 f836 	bl	8008424 <USBD_GetLen>
 80083b8:	4603      	mov	r3, r0
 80083ba:	3301      	adds	r3, #1
 80083bc:	b29b      	uxth	r3, r3
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	4413      	add	r3, r2
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	7812      	ldrb	r2, [r2, #0]
 80083d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	3301      	adds	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	4413      	add	r3, r2
 80083de:	2203      	movs	r2, #3
 80083e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	3301      	adds	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083e8:	e013      	b.n	8008412 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	4413      	add	r3, r2
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	7812      	ldrb	r2, [r2, #0]
 80083f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	3301      	adds	r3, #1
 80083fa:	613b      	str	r3, [r7, #16]
    idx++;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	3301      	adds	r3, #1
 8008400:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	4413      	add	r3, r2
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
    idx++;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	3301      	adds	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e7      	bne.n	80083ea <USBD_GetString+0x52>
 800841a:	e000      	b.n	800841e <USBD_GetString+0x86>
    return;
 800841c:	bf00      	nop
  }
}
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008434:	e005      	b.n	8008442 <USBD_GetLen+0x1e>
  {
    len++;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	3301      	adds	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	3301      	adds	r3, #1
 8008440:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1f5      	bne.n	8008436 <USBD_GetLen+0x12>
  }

  return len;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2202      	movs	r2, #2
 8008468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	2100      	movs	r1, #0
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 fce7 	bl	8008e52 <USBD_LL_Transmit>

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	2100      	movs	r1, #0
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 fcd6 	bl	8008e52 <USBD_LL_Transmit>

  return USBD_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2203      	movs	r2, #3
 80084c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	2100      	movs	r1, #0
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fcda 	bl	8008e94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	2100      	movs	r1, #0
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fcc9 	bl	8008e94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2204      	movs	r2, #4
 8008518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800851c:	2300      	movs	r3, #0
 800851e:	2200      	movs	r2, #0
 8008520:	2100      	movs	r1, #0
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fc95 	bl	8008e52 <USBD_LL_Transmit>

  return USBD_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2205      	movs	r2, #5
 800853e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008542:	2300      	movs	r3, #0
 8008544:	2200      	movs	r2, #0
 8008546:	2100      	movs	r1, #0
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fca3 	bl	8008e94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800855c:	2200      	movs	r2, #0
 800855e:	4912      	ldr	r1, [pc, #72]	; (80085a8 <MX_USB_DEVICE_Init+0x50>)
 8008560:	4812      	ldr	r0, [pc, #72]	; (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008562:	f7fe fcdd 	bl	8006f20 <USBD_Init>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800856c:	f7f8 fb96 	bl	8000c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008570:	490f      	ldr	r1, [pc, #60]	; (80085b0 <MX_USB_DEVICE_Init+0x58>)
 8008572:	480e      	ldr	r0, [pc, #56]	; (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008574:	f7fe fd04 	bl	8006f80 <USBD_RegisterClass>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800857e:	f7f8 fb8d 	bl	8000c9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008582:	490c      	ldr	r1, [pc, #48]	; (80085b4 <MX_USB_DEVICE_Init+0x5c>)
 8008584:	4809      	ldr	r0, [pc, #36]	; (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008586:	f7fe fc3b 	bl	8006e00 <USBD_CDC_RegisterInterface>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008590:	f7f8 fb84 	bl	8000c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008594:	4805      	ldr	r0, [pc, #20]	; (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008596:	f7fe fd29 	bl	8006fec <USBD_Start>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085a0:	f7f8 fb7c 	bl	8000c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085a4:	bf00      	nop
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200000ac 	.word	0x200000ac
 80085ac:	20000208 	.word	0x20000208
 80085b0:	20000018 	.word	0x20000018
 80085b4:	20000098 	.word	0x20000098

080085b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085bc:	2200      	movs	r2, #0
 80085be:	4905      	ldr	r1, [pc, #20]	; (80085d4 <CDC_Init_FS+0x1c>)
 80085c0:	4805      	ldr	r0, [pc, #20]	; (80085d8 <CDC_Init_FS+0x20>)
 80085c2:	f7fe fc37 	bl	8006e34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085c6:	4905      	ldr	r1, [pc, #20]	; (80085dc <CDC_Init_FS+0x24>)
 80085c8:	4803      	ldr	r0, [pc, #12]	; (80085d8 <CDC_Init_FS+0x20>)
 80085ca:	f7fe fc55 	bl	8006e78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000ce4 	.word	0x20000ce4
 80085d8:	20000208 	.word	0x20000208
 80085dc:	200004e4 	.word	0x200004e4

080085e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
 80085fc:	4613      	mov	r3, r2
 80085fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b23      	cmp	r3, #35	; 0x23
 8008604:	d84a      	bhi.n	800869c <CDC_Control_FS+0xac>
 8008606:	a201      	add	r2, pc, #4	; (adr r2, 800860c <CDC_Control_FS+0x1c>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	0800869d 	.word	0x0800869d
 8008610:	0800869d 	.word	0x0800869d
 8008614:	0800869d 	.word	0x0800869d
 8008618:	0800869d 	.word	0x0800869d
 800861c:	0800869d 	.word	0x0800869d
 8008620:	0800869d 	.word	0x0800869d
 8008624:	0800869d 	.word	0x0800869d
 8008628:	0800869d 	.word	0x0800869d
 800862c:	0800869d 	.word	0x0800869d
 8008630:	0800869d 	.word	0x0800869d
 8008634:	0800869d 	.word	0x0800869d
 8008638:	0800869d 	.word	0x0800869d
 800863c:	0800869d 	.word	0x0800869d
 8008640:	0800869d 	.word	0x0800869d
 8008644:	0800869d 	.word	0x0800869d
 8008648:	0800869d 	.word	0x0800869d
 800864c:	0800869d 	.word	0x0800869d
 8008650:	0800869d 	.word	0x0800869d
 8008654:	0800869d 	.word	0x0800869d
 8008658:	0800869d 	.word	0x0800869d
 800865c:	0800869d 	.word	0x0800869d
 8008660:	0800869d 	.word	0x0800869d
 8008664:	0800869d 	.word	0x0800869d
 8008668:	0800869d 	.word	0x0800869d
 800866c:	0800869d 	.word	0x0800869d
 8008670:	0800869d 	.word	0x0800869d
 8008674:	0800869d 	.word	0x0800869d
 8008678:	0800869d 	.word	0x0800869d
 800867c:	0800869d 	.word	0x0800869d
 8008680:	0800869d 	.word	0x0800869d
 8008684:	0800869d 	.word	0x0800869d
 8008688:	0800869d 	.word	0x0800869d
 800868c:	0800869d 	.word	0x0800869d
 8008690:	0800869d 	.word	0x0800869d
 8008694:	0800869d 	.word	0x0800869d
 8008698:	0800869d 	.word	0x0800869d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800869c:	bf00      	nop
  }

  return (USBD_OK);
 800869e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	4805      	ldr	r0, [pc, #20]	; (80086d0 <CDC_Receive_FS+0x24>)
 80086ba:	f7fe fbdd 	bl	8006e78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086be:	4804      	ldr	r0, [pc, #16]	; (80086d0 <CDC_Receive_FS+0x24>)
 80086c0:	f7fe fbf8 	bl	8006eb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000208 	.word	0x20000208

080086d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2212      	movs	r2, #18
 8008708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800870a:	4b03      	ldr	r3, [pc, #12]	; (8008718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	200000cc 	.word	0x200000cc

0800871c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2204      	movs	r2, #4
 800872c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800872e:	4b03      	ldr	r3, [pc, #12]	; (800873c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	200000ec 	.word	0x200000ec

08008740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d105      	bne.n	800875e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4907      	ldr	r1, [pc, #28]	; (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
 8008756:	4808      	ldr	r0, [pc, #32]	; (8008778 <USBD_FS_ProductStrDescriptor+0x38>)
 8008758:	f7ff fe1e 	bl	8008398 <USBD_GetString>
 800875c:	e004      	b.n	8008768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	4904      	ldr	r1, [pc, #16]	; (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
 8008762:	4805      	ldr	r0, [pc, #20]	; (8008778 <USBD_FS_ProductStrDescriptor+0x38>)
 8008764:	f7ff fe18 	bl	8008398 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008768:	4b02      	ldr	r3, [pc, #8]	; (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	200014e4 	.word	0x200014e4
 8008778:	08009148 	.word	0x08009148

0800877c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	4904      	ldr	r1, [pc, #16]	; (800879c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800878c:	4804      	ldr	r0, [pc, #16]	; (80087a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800878e:	f7ff fe03 	bl	8008398 <USBD_GetString>
  return USBD_StrDesc;
 8008792:	4b02      	ldr	r3, [pc, #8]	; (800879c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	200014e4 	.word	0x200014e4
 80087a0:	08009160 	.word	0x08009160

080087a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	221a      	movs	r2, #26
 80087b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087b6:	f000 f855 	bl	8008864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ba:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	200000f0 	.word	0x200000f0

080087c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4907      	ldr	r1, [pc, #28]	; (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80087de:	4808      	ldr	r0, [pc, #32]	; (8008800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e0:	f7ff fdda 	bl	8008398 <USBD_GetString>
 80087e4:	e004      	b.n	80087f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4904      	ldr	r1, [pc, #16]	; (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ea:	4805      	ldr	r0, [pc, #20]	; (8008800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087ec:	f7ff fdd4 	bl	8008398 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f0:	4b02      	ldr	r3, [pc, #8]	; (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	200014e4 	.word	0x200014e4
 8008800:	08009174 	.word	0x08009174

08008804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d105      	bne.n	8008822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4907      	ldr	r1, [pc, #28]	; (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800881a:	4808      	ldr	r0, [pc, #32]	; (800883c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800881c:	f7ff fdbc 	bl	8008398 <USBD_GetString>
 8008820:	e004      	b.n	800882c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	4904      	ldr	r1, [pc, #16]	; (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008826:	4805      	ldr	r0, [pc, #20]	; (800883c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008828:	f7ff fdb6 	bl	8008398 <USBD_GetString>
  }
  return USBD_StrDesc;
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	200014e4 	.word	0x200014e4
 800883c:	08009180 	.word	0x08009180

08008840 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	220c      	movs	r2, #12
 8008850:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008852:	4b03      	ldr	r3, [pc, #12]	; (8008860 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	200000e0 	.word	0x200000e0

08008864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800886a:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <Get_SerialNum+0x44>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <Get_SerialNum+0x48>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008876:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <Get_SerialNum+0x4c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800888a:	2208      	movs	r2, #8
 800888c:	4909      	ldr	r1, [pc, #36]	; (80088b4 <Get_SerialNum+0x50>)
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 f814 	bl	80088bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008894:	2204      	movs	r2, #4
 8008896:	4908      	ldr	r1, [pc, #32]	; (80088b8 <Get_SerialNum+0x54>)
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f000 f80f 	bl	80088bc <IntToUnicode>
  }
}
 800889e:	bf00      	nop
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	1fff7a10 	.word	0x1fff7a10
 80088ac:	1fff7a14 	.word	0x1fff7a14
 80088b0:	1fff7a18 	.word	0x1fff7a18
 80088b4:	200000f2 	.word	0x200000f2
 80088b8:	20000102 	.word	0x20000102

080088bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	75fb      	strb	r3, [r7, #23]
 80088d2:	e027      	b.n	8008924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	0f1b      	lsrs	r3, r3, #28
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d80b      	bhi.n	80088f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	0f1b      	lsrs	r3, r3, #28
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	4619      	mov	r1, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	440b      	add	r3, r1
 80088ec:	3230      	adds	r2, #48	; 0x30
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	e00a      	b.n	800890a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	0f1b      	lsrs	r3, r3, #28
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	4619      	mov	r1, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	440b      	add	r3, r1
 8008904:	3237      	adds	r2, #55	; 0x37
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	3301      	adds	r3, #1
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	4413      	add	r3, r2
 800891a:	2200      	movs	r2, #0
 800891c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	3301      	adds	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]
 8008924:	7dfa      	ldrb	r2, [r7, #23]
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	429a      	cmp	r2, r3
 800892a:	d3d3      	bcc.n	80088d4 <IntToUnicode+0x18>
  }
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
	...

0800893c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b098      	sub	sp, #96	; 0x60
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008944:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	609a      	str	r2, [r3, #8]
 8008950:	60da      	str	r2, [r3, #12]
 8008952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008954:	f107 0310 	add.w	r3, r7, #16
 8008958:	223c      	movs	r2, #60	; 0x3c
 800895a:	2100      	movs	r1, #0
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fbbb 	bl	80090d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800896a:	d148      	bne.n	80089fe <HAL_PCD_MspInit+0xc2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800896c:	2320      	movs	r3, #32
 800896e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008970:	2300      	movs	r3, #0
 8008972:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008974:	f107 0310 	add.w	r3, r7, #16
 8008978:	4618      	mov	r0, r3
 800897a:	f7fb fda7 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8008984:	f7f8 f98a 	bl	8000c9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008988:	2300      	movs	r3, #0
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	4b1e      	ldr	r3, [pc, #120]	; (8008a08 <HAL_PCD_MspInit+0xcc>)
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	4a1d      	ldr	r2, [pc, #116]	; (8008a08 <HAL_PCD_MspInit+0xcc>)
 8008992:	f043 0301 	orr.w	r3, r3, #1
 8008996:	6313      	str	r3, [r2, #48]	; 0x30
 8008998:	4b1b      	ldr	r3, [pc, #108]	; (8008a08 <HAL_PCD_MspInit+0xcc>)
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80089a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089aa:	2302      	movs	r3, #2
 80089ac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089b2:	2303      	movs	r3, #3
 80089b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089b6:	230a      	movs	r3, #10
 80089b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80089be:	4619      	mov	r1, r3
 80089c0:	4812      	ldr	r0, [pc, #72]	; (8008a0c <HAL_PCD_MspInit+0xd0>)
 80089c2:	f7f9 fee5 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089c6:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ca:	4a0f      	ldr	r2, [pc, #60]	; (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d0:	6353      	str	r3, [r2, #52]	; 0x34
 80089d2:	2300      	movs	r3, #0
 80089d4:	60bb      	str	r3, [r7, #8]
 80089d6:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089da:	4a0b      	ldr	r2, [pc, #44]	; (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089e0:	6453      	str	r3, [r2, #68]	; 0x44
 80089e2:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <HAL_PCD_MspInit+0xcc>)
 80089e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ea:	60bb      	str	r3, [r7, #8]
 80089ec:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089ee:	2200      	movs	r2, #0
 80089f0:	2100      	movs	r1, #0
 80089f2:	2043      	movs	r0, #67	; 0x43
 80089f4:	f7f9 fe95 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089f8:	2043      	movs	r0, #67	; 0x43
 80089fa:	f7f9 feae 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089fe:	bf00      	nop
 8008a00:	3760      	adds	r7, #96	; 0x60
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40023800 	.word	0x40023800
 8008a0c:	40020000 	.word	0x40020000

08008a10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f7fe fb2d 	bl	8007086 <USBD_LL_SetupStage>
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a46:	78fa      	ldrb	r2, [r7, #3]
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	440b      	add	r3, r1
 8008a54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f7fe fb67 	bl	8007130 <USBD_LL_DataOutStage>
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a7c:	78fa      	ldrb	r2, [r7, #3]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	334c      	adds	r3, #76	; 0x4c
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	4619      	mov	r1, r3
 8008a92:	f7fe fc00 	bl	8007296 <USBD_LL_DataInStage>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe fd34 	bl	800751a <USBD_LL_SOF>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d001      	beq.n	8008ad2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ace:	f7f8 f8e5 	bl	8000c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ad8:	7bfa      	ldrb	r2, [r7, #15]
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe fcde 	bl	800749e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fc86 	bl	80073fa <USBD_LL_Reset>
}
 8008aee:	bf00      	nop
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fcd9 	bl	80074be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b2c:	4b04      	ldr	r3, [pc, #16]	; (8008b40 <HAL_PCD_SuspendCallback+0x48>)
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	4a03      	ldr	r2, [pc, #12]	; (8008b40 <HAL_PCD_SuspendCallback+0x48>)
 8008b32:	f043 0306 	orr.w	r3, r3, #6
 8008b36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	e000ed00 	.word	0xe000ed00

08008b44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fcc9 	bl	80074ea <USBD_LL_Resume>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fd21 	bl	80075be <USBD_LL_IsoOUTIncomplete>
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fcdd 	bl	800755a <USBD_LL_IsoINIncomplete>
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fd33 	bl	8007622 <USBD_LL_DevConnected>
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fd30 	bl	8007638 <USBD_LL_DevDisconnected>
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d13f      	bne.n	8008c70 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bf0:	4a22      	ldr	r2, [pc, #136]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a20      	ldr	r2, [pc, #128]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008bfc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c00:	4b1e      	ldr	r3, [pc, #120]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008c08:	4b1c      	ldr	r3, [pc, #112]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c0a:	2206      	movs	r2, #6
 8008c0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c0e:	4b1b      	ldr	r3, [pc, #108]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c10:	2202      	movs	r2, #2
 8008c12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c14:	4b19      	ldr	r3, [pc, #100]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c1a:	4b18      	ldr	r3, [pc, #96]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c20:	4b16      	ldr	r3, [pc, #88]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c26:	4b15      	ldr	r3, [pc, #84]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c2c:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008c32:	4b12      	ldr	r3, [pc, #72]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c38:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c44:	480d      	ldr	r0, [pc, #52]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c46:	f7f9 ff58 	bl	8002afa <HAL_PCD_Init>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8008c50:	f7f8 f824 	bl	8000c9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c54:	2180      	movs	r1, #128	; 0x80
 8008c56:	4809      	ldr	r0, [pc, #36]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c58:	f7fb f9e3 	bl	8004022 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c5c:	2240      	movs	r2, #64	; 0x40
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4806      	ldr	r0, [pc, #24]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c62:	f7fb f997 	bl	8003f94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c66:	2280      	movs	r2, #128	; 0x80
 8008c68:	2101      	movs	r1, #1
 8008c6a:	4804      	ldr	r0, [pc, #16]	; (8008c7c <USBD_LL_Init+0x9c>)
 8008c6c:	f7fb f992 	bl	8003f94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200016e4 	.word	0x200016e4

08008c80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fa f853 	bl	8002d42 <HAL_PCD_Start>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f990 	bl	8008fc8 <USBD_Get_USB_Status>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	4608      	mov	r0, r1
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	70fb      	strb	r3, [r7, #3]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70bb      	strb	r3, [r7, #2]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cde:	78bb      	ldrb	r3, [r7, #2]
 8008ce0:	883a      	ldrh	r2, [r7, #0]
 8008ce2:	78f9      	ldrb	r1, [r7, #3]
 8008ce4:	f7fa fd51 	bl	800378a <HAL_PCD_EP_Open>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f96a 	bl	8008fc8 <USBD_Get_USB_Status>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d1c:	78fa      	ldrb	r2, [r7, #3]
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fa fd9a 	bl	800385a <HAL_PCD_EP_Close>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 f94b 	bl	8008fc8 <USBD_Get_USB_Status>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fa fe72 	bl	8003a48 <HAL_PCD_EP_SetStall>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 f92c 	bl	8008fc8 <USBD_Get_USB_Status>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d98:	78fa      	ldrb	r2, [r7, #3]
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fa feb7 	bl	8003b10 <HAL_PCD_EP_ClrStall>
 8008da2:	4603      	mov	r3, r0
 8008da4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 f90d 	bl	8008fc8 <USBD_Get_USB_Status>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	da0b      	bge.n	8008df0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dde:	68f9      	ldr	r1, [r7, #12]
 8008de0:	4613      	mov	r3, r2
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	333e      	adds	r3, #62	; 0x3e
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	e00b      	b.n	8008e08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	440b      	add	r3, r1
 8008e02:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e2e:	78fa      	ldrb	r2, [r7, #3]
 8008e30:	4611      	mov	r1, r2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fa fc84 	bl	8003740 <HAL_PCD_SetAddress>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f8c2 	bl	8008fc8 <USBD_Get_USB_Status>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b086      	sub	sp, #24
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e70:	7af9      	ldrb	r1, [r7, #11]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	f7fa fd9d 	bl	80039b4 <HAL_PCD_EP_Transmit>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f8a1 	bl	8008fc8 <USBD_Get_USB_Status>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	607a      	str	r2, [r7, #4]
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008eb2:	7af9      	ldrb	r1, [r7, #11]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	f7fa fd19 	bl	80038ee <HAL_PCD_EP_Receive>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f880 	bl	8008fc8 <USBD_Get_USB_Status>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ecc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	4611      	mov	r1, r2
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fa fd49 	bl	8003984 <HAL_PCD_EP_GetRxCount>
 8008ef2:	4603      	mov	r3, r0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <HAL_PCDEx_LPM_Callback+0x18>
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d01f      	beq.n	8008f52 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008f12:	e03b      	b.n	8008f8c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008f1c:	f7f7 fce0 	bl	80008e0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f20:	4b1c      	ldr	r3, [pc, #112]	; (8008f94 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	4a1b      	ldr	r2, [pc, #108]	; (8008f94 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f26:	f023 0306 	bic.w	r3, r3, #6
 8008f2a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe facd 	bl	80074ea <USBD_LL_Resume>
    break;
 8008f50:	e01c      	b.n	8008f8c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f64:	f043 0301 	orr.w	r3, r3, #1
 8008f68:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe faa4 	bl	80074be <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f7e:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	4a04      	ldr	r2, [pc, #16]	; (8008f94 <HAL_PCDEx_LPM_Callback+0x98>)
 8008f84:	f043 0306 	orr.w	r3, r3, #6
 8008f88:	6113      	str	r3, [r2, #16]
    break;
 8008f8a:	bf00      	nop
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	e000ed00 	.word	0xe000ed00

08008f98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fa0:	4b03      	ldr	r3, [pc, #12]	; (8008fb0 <USBD_static_malloc+0x18>)
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	20001bf0 	.word	0x20001bf0

08008fb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d817      	bhi.n	800900c <USBD_Get_USB_Status+0x44>
 8008fdc:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <USBD_Get_USB_Status+0x1c>)
 8008fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe2:	bf00      	nop
 8008fe4:	08008ff5 	.word	0x08008ff5
 8008fe8:	08008ffb 	.word	0x08008ffb
 8008fec:	08009001 	.word	0x08009001
 8008ff0:	08009007 	.word	0x08009007
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff8:	e00b      	b.n	8009012 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffe:	e008      	b.n	8009012 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009000:	2301      	movs	r3, #1
 8009002:	73fb      	strb	r3, [r7, #15]
    break;
 8009004:	e005      	b.n	8009012 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009006:	2303      	movs	r3, #3
 8009008:	73fb      	strb	r3, [r7, #15]
    break;
 800900a:	e002      	b.n	8009012 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800900c:	2303      	movs	r3, #3
 800900e:	73fb      	strb	r3, [r7, #15]
    break;
 8009010:	bf00      	nop
  }
  return usb_status;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <__itoa>:
 8009020:	1e93      	subs	r3, r2, #2
 8009022:	2b22      	cmp	r3, #34	; 0x22
 8009024:	b510      	push	{r4, lr}
 8009026:	460c      	mov	r4, r1
 8009028:	d904      	bls.n	8009034 <__itoa+0x14>
 800902a:	2300      	movs	r3, #0
 800902c:	700b      	strb	r3, [r1, #0]
 800902e:	461c      	mov	r4, r3
 8009030:	4620      	mov	r0, r4
 8009032:	bd10      	pop	{r4, pc}
 8009034:	2a0a      	cmp	r2, #10
 8009036:	d109      	bne.n	800904c <__itoa+0x2c>
 8009038:	2800      	cmp	r0, #0
 800903a:	da07      	bge.n	800904c <__itoa+0x2c>
 800903c:	232d      	movs	r3, #45	; 0x2d
 800903e:	700b      	strb	r3, [r1, #0]
 8009040:	4240      	negs	r0, r0
 8009042:	2101      	movs	r1, #1
 8009044:	4421      	add	r1, r4
 8009046:	f000 f805 	bl	8009054 <__utoa>
 800904a:	e7f1      	b.n	8009030 <__itoa+0x10>
 800904c:	2100      	movs	r1, #0
 800904e:	e7f9      	b.n	8009044 <__itoa+0x24>

08009050 <itoa>:
 8009050:	f7ff bfe6 	b.w	8009020 <__itoa>

08009054 <__utoa>:
 8009054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009056:	4c1f      	ldr	r4, [pc, #124]	; (80090d4 <__utoa+0x80>)
 8009058:	b08b      	sub	sp, #44	; 0x2c
 800905a:	4605      	mov	r5, r0
 800905c:	460b      	mov	r3, r1
 800905e:	466e      	mov	r6, sp
 8009060:	f104 0c20 	add.w	ip, r4, #32
 8009064:	6820      	ldr	r0, [r4, #0]
 8009066:	6861      	ldr	r1, [r4, #4]
 8009068:	4637      	mov	r7, r6
 800906a:	c703      	stmia	r7!, {r0, r1}
 800906c:	3408      	adds	r4, #8
 800906e:	4564      	cmp	r4, ip
 8009070:	463e      	mov	r6, r7
 8009072:	d1f7      	bne.n	8009064 <__utoa+0x10>
 8009074:	7921      	ldrb	r1, [r4, #4]
 8009076:	7139      	strb	r1, [r7, #4]
 8009078:	1e91      	subs	r1, r2, #2
 800907a:	6820      	ldr	r0, [r4, #0]
 800907c:	6038      	str	r0, [r7, #0]
 800907e:	2922      	cmp	r1, #34	; 0x22
 8009080:	f04f 0100 	mov.w	r1, #0
 8009084:	d904      	bls.n	8009090 <__utoa+0x3c>
 8009086:	7019      	strb	r1, [r3, #0]
 8009088:	460b      	mov	r3, r1
 800908a:	4618      	mov	r0, r3
 800908c:	b00b      	add	sp, #44	; 0x2c
 800908e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009090:	1e58      	subs	r0, r3, #1
 8009092:	4684      	mov	ip, r0
 8009094:	fbb5 f7f2 	udiv	r7, r5, r2
 8009098:	fb02 5617 	mls	r6, r2, r7, r5
 800909c:	3628      	adds	r6, #40	; 0x28
 800909e:	446e      	add	r6, sp
 80090a0:	460c      	mov	r4, r1
 80090a2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80090a6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80090aa:	462e      	mov	r6, r5
 80090ac:	42b2      	cmp	r2, r6
 80090ae:	f101 0101 	add.w	r1, r1, #1
 80090b2:	463d      	mov	r5, r7
 80090b4:	d9ee      	bls.n	8009094 <__utoa+0x40>
 80090b6:	2200      	movs	r2, #0
 80090b8:	545a      	strb	r2, [r3, r1]
 80090ba:	1919      	adds	r1, r3, r4
 80090bc:	1aa5      	subs	r5, r4, r2
 80090be:	42aa      	cmp	r2, r5
 80090c0:	dae3      	bge.n	800908a <__utoa+0x36>
 80090c2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80090c6:	780e      	ldrb	r6, [r1, #0]
 80090c8:	7006      	strb	r6, [r0, #0]
 80090ca:	3201      	adds	r2, #1
 80090cc:	f801 5901 	strb.w	r5, [r1], #-1
 80090d0:	e7f4      	b.n	80090bc <__utoa+0x68>
 80090d2:	bf00      	nop
 80090d4:	080091c8 	.word	0x080091c8

080090d8 <memset>:
 80090d8:	4402      	add	r2, r0
 80090da:	4603      	mov	r3, r0
 80090dc:	4293      	cmp	r3, r2
 80090de:	d100      	bne.n	80090e2 <memset+0xa>
 80090e0:	4770      	bx	lr
 80090e2:	f803 1b01 	strb.w	r1, [r3], #1
 80090e6:	e7f9      	b.n	80090dc <memset+0x4>

080090e8 <__libc_init_array>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4d0d      	ldr	r5, [pc, #52]	; (8009120 <__libc_init_array+0x38>)
 80090ec:	4c0d      	ldr	r4, [pc, #52]	; (8009124 <__libc_init_array+0x3c>)
 80090ee:	1b64      	subs	r4, r4, r5
 80090f0:	10a4      	asrs	r4, r4, #2
 80090f2:	2600      	movs	r6, #0
 80090f4:	42a6      	cmp	r6, r4
 80090f6:	d109      	bne.n	800910c <__libc_init_array+0x24>
 80090f8:	4d0b      	ldr	r5, [pc, #44]	; (8009128 <__libc_init_array+0x40>)
 80090fa:	4c0c      	ldr	r4, [pc, #48]	; (800912c <__libc_init_array+0x44>)
 80090fc:	f000 f818 	bl	8009130 <_init>
 8009100:	1b64      	subs	r4, r4, r5
 8009102:	10a4      	asrs	r4, r4, #2
 8009104:	2600      	movs	r6, #0
 8009106:	42a6      	cmp	r6, r4
 8009108:	d105      	bne.n	8009116 <__libc_init_array+0x2e>
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009110:	4798      	blx	r3
 8009112:	3601      	adds	r6, #1
 8009114:	e7ee      	b.n	80090f4 <__libc_init_array+0xc>
 8009116:	f855 3b04 	ldr.w	r3, [r5], #4
 800911a:	4798      	blx	r3
 800911c:	3601      	adds	r6, #1
 800911e:	e7f2      	b.n	8009106 <__libc_init_array+0x1e>
 8009120:	080091f8 	.word	0x080091f8
 8009124:	080091f8 	.word	0x080091f8
 8009128:	080091f8 	.word	0x080091f8
 800912c:	080091fc 	.word	0x080091fc

08009130 <_init>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr

0800913c <_fini>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr
